ffmpeg -f x11grab -s wxga -r 25 -i :0.0 -sameq ./out.mpg

echo #/[\x80-\xff]
head -1 ../../screen_record-01.mkv  >>foo
echo "$(TZ=GMT date -d @0) | $(TZ=GMT date -d @$((2**31-1)))"
apt-cache search swaks
sudo apt-get install swaks
swaks --to foobar@comcast\.net --server mx1.comcast\.com --quit-after RCPT
sudo apt-get install ascii
ascii -s "show me the codes" | column -t
ascii -s "a" | column -t
ascii -s "0" | column -t
ascii -x
ascii || man ascii
find . -name '*\ *' # Find files under the current directory tree that have a space in the filename.
printf "hello" | wc -l 
#getent passwd|while IFS=: read -r user n uid n n home n;do if [[ $uid -ge 500 ]];then printf "$user ";du -sh $home;fi;done # space per user
sudo apt-get install sox
play -n synth sine 8000 bend 0.5,-1800,5 flanger 0 3 0 20 10 tri 20 quad trim 0 7 # Virtual fireworks noises (WARNING: screamer)
#play -n synth whitenoise 200 fade 0.2 1 1 trim 0 0.5 ; sleep 1 ; play -n synth whitenoise 200 fade 0 1 1 trim 0 1 # Bottle rocket sound
look frag
look .| egrep "^[a-z]{1,5}$" |while read word; do [ -e /tmp/$word ] && echo $word ; done # Maybe find file/dirs in an unreadable /tmp dir.
awk '(NR%2==0) { print $NF }' data.txt # Print the last field of every other line in the file data.txt. Use NR%2==1 for the "other" line.
printf "\xE2\x98\x95\n"
#awk '{print $4}' apache_log|sort -n|cut -c1-15|uniq -c|awk '{b="";for(i=0;i<$1/10;i++){b=b"#"}; print $0 " " b;}' # Request by hour graph.
#for vid in *.avi ; do mplayer -ao "pcm:file=${vid%%.avi}.wav:fast" -vo null "$vid" ; done # Fast extract audio track from a set of videos.
dpkg -S $( which notify-send )
#sox -m -v1 24.flac -v-1 24_CTF.flac signal.wav silence 2 5 2% # Use sox to invert track and get hidden audio signal
yes "$(seq 231 -1 16)" | while read i; do printf "\x1b[48;5;${i}m\n"; sleep .02; done # A rainbow in your shell.
ls -l --time=atime 
ls -l
awk '/session opened/ {print $(NF-2)}' /var/log/auth.log 
rec -t wav - >foo.wav
play foo.wav 
#rec -t wav - | ssh remotehost play -t wav - # Remote intercom system. "Kent, this is God!"
#lsof -p 1234 |awk '{if ($4=="txt"){print $NF}}' |head -1 # Show the path to the executable that was run to start PID 1234. Need permission.
mplayer -vo png -frames 1 tv:// -tv width=1280:height=720 # Take a single 1280x720 picture of your TV input, which is often your webcam.
qiv 00000001.png 
df -hP |column -t |tee >( head -n1 > /dev/stderr ) |grep % |sort -k5nr # Order filesystems by percent usage and keep header in place.
function box(){ t="$1xxxx";c=${2:-=}; echo ${t//?/$c}; echo "$c $1 $c"; echo ${t//?/$c}; } # Make box around text
box text
#awk '{a[$1] += $10} END {for (h in a) print h " " a[h]}' access_log | sort -k 2 -nr | head -10 # Display top bandwidth hogs on website.
lsof -i TCP:80 # Show what processes are using port 80 either locally or remotely. Need to be root for unowned processes.
apt-cache search xdotool
#x=0;y=0;while [[ $y -lt 500 ]] ; do xdotool mousemove --polar $x $y ; x=$(($x+3));y=$(($y+1)); sleep 0.001; done # Mouse spiral
sudo apt-get install xdotool
ssh bandit0@bandit.labs.overthewire.org
for i in {A..Z}; do echo $i; done |nl |grep "[XKCD]" |awk '{sum+=$1} END {print sum}' # The real meaning of #XKCD
echo "scale=10; 3.1415926535 * (1337.0/100.0)" | bc 
printf '%d\n' "'*"  # returns "42"
#tar xvf program-1.2.3.tar.gz ; cd ${_%%.tar.gz} # Untar a program file and cd into the directory it created without the .tar.gz extension.
#!#:$:s/.png/.jpg/
for f in *.wav; do lame --vbr-new -V 3 "$f" "${f%.wav}.mp3"; done # Convert to mp3.
for f in *.wav; do lame --vbr-new -V 3 "$f" "${f%.wav}.mp3"; done # Convert to mp3.
#xmodmap -e "keycode 166 = 0x0000" -e "keycode 167 = 0x0000" # Disable the Back/Forward keys 
#find . -maxdepth 1 -name '*.svg' |while IFS=$'\n' read f ; do inkscape "$f" --export-png="PNG/${f%%.svg}.png"; done # SVG 2 PNG in CWD.
play -q -n synth sine F2 sine C3 remix - fade 0 4 .1 norm -4 bend 0.5,2399,2 fade 0 4.0 0.5
echo '(play -q -n synth sine F2 sine C3 remix - fade 0 4 .1 norm -4 bend 0.5,2399,2 fade 0 4.0 0.5 &)' >> ~/.bashrc # THXsh startup sound.
#find ./music -name \*.mp3 -exec cp {} ./new \; # Idea: Backslashing the * glob instead of quoting the expression
tarbomb(){ [[ $( tar tf "$1" |sed 's,^\./,,' |awk -F/ '{print $1}' |sort |uniq |wc -l ) -eq 1 ]] && echo "OK" || echo 'Tarbomb!'; } # Detect
tarbomb ~/tmp/supercat-0.5.5.tar.gz 
#while [[ $( date +%A ) != "Friday" ]]; do echo Its not Friday yet ; sleep 1h ; done ; echo "Yea Friday" # Its not Friday yet?
#find ~/path/to/files -mmin -2 -execdir mv -t ./target/ {} + # Move all files modified in the last 2 mins to ./target
#42 = 101010 in binary
#diff <(cd dir1 ; ls -1 | sort) <(cd dir2 ; ls -1 | sort) # Show the differences between two directories. comm can also be good for this
last -da | egrep -v "^(root|reboot|asmith) " # See the last logged in users, but filter out entries for root, reboots and asmith.
grep -o --binary-files=text '[[:alpha:]]' /dev/urandom |tr -d '[a-zA-Z]' |xargs -n $(($COLUMNS/2)) |tr -d ' '| lolcat -f | pv -L80k # 4fun
#egrep -v "(^#|^\ *$)" httpd.conf | less # Only view the active configuration in a heavily commented httpd.conf file.
egrep -v "(^#|^\ *$)" /etc/apache2/apache2.conf|less
sed -ni '1h;1!p;${x;p}' queuefile  # move 1st line to last
vi queuefile
echo a b c c d e f
convert -quality 75 foo.jpg !#:$:s/.jpg/.png/
echo foo bar !#:$:s/bar/baz/
join -o 1.1,2.2,1.3,1.4,1.5,1.6,1.7 -1 1 -2 1 -t: passwd shadow

==February 2015==
if [ -x `which screen` ]; then screen -q -ls; [ $? -ge 10 ] && screen -ls; fi #in .profile, lists screen sessions on login
tmux list-sessions 2> /dev/null # Put this in your .bashrc so that on login it will list your tmux sessions. If none, don't show the error.
grep -o -P "(?<=CRON\[)\d+" /var/log/syslog # GNU grep supports perl regex expressions. This gives only the PID on CRON lines in syslog.
sudo shutdown -h 60 & mpg123 ambientmusic/*.mp3 # Play music for 60 minutes and then shutdown. Like sleep on alarm clock.
kill -USR1 $( pidof dd ) # In Linux, find running dd processes and send them a signal to print out their progress.
[ -f /etc/shadow ]&&while :;do N=$(($RANDOM%$(tput cols)));for i in $(seq 1 $N);do echo -n " ";done;echo \*;done # Happy Groundhog Day!
apt-file search /usr/bin/apxs2 # On Debian, find out which non-installed package provides a file. Need to install apt-file package first.
comm -23 <(grep -rl foo . |sort) <(grep -rl bar . |sort) # When adding "bar" to project, which files contain foo but not bar?
dig +short txt linux.wp.dg.cx # http://www.commandlinefu.com/commands/view/2829/query-wikipedia-via-console-over-dns
dig @8.8.8.8 +short txt linux.wp.dg.cx
time read  # press enter after a given amount of time to get time elapsed

==March 2015==
pwgen 12
convert -crop 150x750+100+150 dress.jpg txt: | grep "black|#[01].[01].[01]." # See if there is any black in a 150x750 crop of an image.
n=(C D E F G A B "C4 ");stat -c%a *|while read -n1 k;do x=${n[$k]};sleep .2;play -qn synth pl ${x}3 fade 0 1 & done # Listen to permissions
pmd5(){ xsel -p|md5sum|cut -d' ' -f1;}; while :;do if [[ "$l" != "$( pmd5 )" ]];then xsel -p;echo;l=$( pmd5 );fi ;sleep .25;done # paste chk
find . -maxdepth 1 -type f -printf '%TY-%Tm\n' | sort | uniq -c # Counts files in the current path by modification month.
find hosts -name auth.log -o -name secure.log | xargs ls -ltra # Find logs for auths under hosts dir and list them by last modified time.
grep -oP "\w{8}(-\w{4}){3}-\w{12}" # return all UUIDs in a given file (e.g., a log file)
while [[ $(pgrep -c -f "ssh " ) -le 20 ]]; do sleep 10; done; echo "There is a problem" # Do something special number of ssh processes > 20
grep -r 'for <me@host>' . |awk -F\; '{print $2}'|while read -r date; do date -d "$date" +%Y-%m-%d ; done > dates-Ymd # E-mail reformat dates
https://www.digitalocean.com/community/tutorials/top-10-linux-easter-eggs
Privacy: Tor, Tox, SpiderOak, ProtonMail, Tails

==sed==
* Print every Nth line (to a maximum)
function every() { sed -n -e "${2}q" -e "0~${1}p" ${3:-/dev/stdin}; } # 

Print selected lines from a file or the output of a command.

Usage:
every NTH MAX [FILE]

Print every NTH line (from the first MAX lines) of FILE.

If FILE is omitted, stdin is used.

The command simply passes the input to a sed script:
sed -n -e "${2}q" -e "0~${1}p" ${3:-/dev/stdin}

print no output
sed -n

quit after this many lines (controlled by the second parameter)
-e "${2}q"

print every NTH line (controlled by the first parameter)
-e "0~${1}p"

take input from $3 (if it exists) otherwise use /dev/stdin
{3:-/dev/stdin} 

==IRC+expect==
* Bare Metal IRC Client

 $ nik=clf$RANDOM;sr=irc.efnet.org;expect -c "set timeout -1;spawn nc $sr 6666;set send_human {.1 .2 1 .2 1};expect AUTH*\n ;send -h \"user $nik * * :$nik commandlinefu\nnick $nik\n\"; interact -o -re (PING.:)(.*\$) {send \"PONG :\$interact_out(2,string)\"}"

:Uses the extremely cool utilities netcat and expect.
:"expect" logs in & monitors for server PING checks.
:When a PING is received it sends the PONG needed to stay connected.
:IRC commands to try: HELP, TIME, MOTD, JOIN and PRIVMSG
:The "/" in front of IRC commands are not needed, e.g. type JOIN #mygroup
:Learn about expect: http://tldp.org/LDP/LGNET/issue48/fisher.html
:The sample output shows snippets from an actual IRC session.

==Free Cloud Shell==

* Get a free shell account on a community server

Bash process substitution which curls the website 'hashbang.sh' and executes the shell script embedded in the page.

Download locally over SSL

> curl https://hashbang.sh >> hashbang.sh

Verify integrty with GPG (If available)

> gpg --recv-keys 0xD2C4C74D8FAA96F5
> gpg --verify hashbang.sh

Inspect source code

> less hashbang.sh

Run

> chmod +x hashbang.sh
> ./hashbang.sh

==ubuntu==
dpkg-awk -f=/var/lib/dpkg/available "Package:^[aA]s.*" -- Package Version
dpkg -l | awk '/^ii/ {print $2, $3}'
dpkg -l | awk -FS="\t" '/^ii/ {print $2, $3}'|head
dpkg -l | awk '/^ii/ {print $2, $3}' |head
apt-config dump | less
aptitude search ~o
dpkg --get-selections | head
dpkg-query -Wf '${Package}\t${Version}\n'|head

==External links==
* http://overthewire.org/wargames/bandit/
* http://howfuckedismydistro.com/
* http://vim-adventures.com/
* http://www.climagic.org/txt/difference-between-bash-shell-last-argument-reference-methods.html

==Timing out in a shell script==
I have a shell script that's reading from standard input. In rare circumstances, there will be no one ready to provide input, and the script must time out. In case of timeout, the script must execute some cleanup code:

 foo=`{ { cat 1>&3; kill 0; } | { sleep 2; kill 0; } } 3>&1`

That is: run the output-producing command and sleep in the same process group, a process group just for them. Whichever command returns first kills the whole process group.

Would anyone wonder: Yes, the pipe is not used; it's bypassed using the redirections. The sole purpose of it is to have the shell run the two process in the same process group.

As Gilles pointed out in his comment, this won't work in a shell script because the script process would be killed along with the two subprocess.

One way¹ to force a command to run in a separate process group is to start a new interactive shell:

 #/bin/sh
 foo=`sh -ic '{ cat 1>&3; kill 0; } | { sleep 2; kill 0; }' 3>&1 2>/dev/null`
 [ -n "$foo" ] && echo got: "$foo" || echo timeouted

But there might be caveats with this (e.g. when stdin is not a tty?). The stderr redirection is there to get rid of the "Terminated" message when the interactive shell is killed.

Tested with zsh,bash and dash.

==April 2015==
for i in /usr/share/cowsay/cows/*.cow; do cowsay -f $i "$i"; done # show all cows
awk '!NF || !seen[$0]++' # remove duplicate lines whilst keeping order and empty lines
truncate --size 1G bigfile.txt # Create arbitrary big file full of zeroes but done in a second
truncate -s0 file.txt # zero out/empty file.txt
dd if=/dev/zero of=foo.txt bs=1M count=1 # Create a file of a given size in Linux
dd if=/dev/zero of=sparse_file bs=1024 skip=1024 count=1 # Create a file of a given size in Linux (If you're trying to create a sparse file, you can use dd by 'skip'ing to the last block instance.)
curl -H"host: mars" http://localhost

* Using awk to sum/count a column of numbers:
cat count.txt | awk '{ sum+=$1} END {print sum}'
numsum count.txt
echo $(( $( cat count.txt | tr "\n" "+" | xargs -I{} echo {} 0 ) ))

* Display the top ten running processes - sorted by memory usage:
ps aux | sort -nk +4 | tail
ps aux --sort -rss | head
ps axo %mem,pid,euser,cmd | sort -nr | head -n 10

look . |grep ph |while read w; do espeak -qx "$w"|grep -q f||echo "$w"; done # Find ph words where the ph is not pronounced as 'f'
for u in example/bc{3,8}449{0,8,9}2-ab7a-1{3,8}03; do curl -sI $u|grep -q 404||echo $u; done # Try finding the URL given a fuzzy screenshot.
LESS="+/ass," man mplayer # Open mplayer man page and search for 'ass,'.
iptables -I INPUT -s $(cut -d' ' -f1 <<<$SSH_CLIENT) -m time --datestop $(date --iso-8601=seconds --date="2 hours" | cut -d+ -f1) -j ACCEPT
find "$dir" -name '*.txt' -print0|xargs -0 grep -FwiHc $word|sort -rn -t: -k2 # Find *.txt in $dir sorted by lines with $word
gawk '{gsub("0","",$1);a[$1]+=$2} END {for (p in a){print p " " a[p]}}' resistors.txt # Sum instance counts by start set of non-zero numbers
googlesay(){ curl -A RG translate\.google\.com/translate_tts -d "tl=en&q=$*" |mpg123 -; }; # Usage: googlesay "How are you?"
n=('' E4 B3 G3 D3 A2 E2);while read -n1 -p 'string? ' i;do case $i in [1-6]) play -n synth pl ${n[$i]} fade 0 1 ;; *) echo;break;;esac;done
rm -fv /somedir | tee remove.log  # When you want to see output AND save it, try "| tee" of just a ">" redirect.
date -d @$(grep ^btime /proc/stat | cut -d" " -f 2) # On Linux, show the exact time/date the system was last booted.
zgrep -A100 -P "(?<= status: )(?!NOERROR)" 99.*.gz # Use Perl regex to find cases of status: NOT followed by NOERROR in dig output files.
:'<,'>!sort |column -t # In vim, after using something like 'v' to select a range of lines, you can pass the range of lines through commands
find . -type l | (while read FN ; do test -e "$FN" || ls -ld "$FN"; done) # Find broken symlinks.
select mus in *.mp3 ; do mpg123 "$mus" ; done # Multiple choice music player.  Type the number of the song you want to hear.
echo $(( ( $( date -d '2031-06-28' +%s ) - $( date +%s ) ) / 86400 )) days until Tau day # See http://www.tauday.com
printf "%d\n" {1..12} | xargs -n1 -I{} date -d "2015-{}-13" | grep ^Fri # How many Friday the 13ths are there this year.
while true ; do cp -va *.dat /tmp/saveit/ 2> /dev/null ; sleep 0.05 ; done # Try catching a file that shows up temporarily in a queue.
find . -mtime +$(date +%j) -ls | awk '{sum+=$7} END {print sum}' # How much space files older than the present year are using. %j=Julian day
find /data -maxdepth 1 -type d -mtime +7 -name '20??????' -exec rm -vf {} + # Remove data dirs with specific length names older than 7 days
dd if=/dev/sda bs=1G count=80 |pv -s80G |pbzip2 -c |ssh user@remote 'cat > /tmp/sda-80GB.bz2' # First 80GB of sda to remote host w/ progress
yes "$(seq 231 -1 16)" | while read i; do printf "\x1b[48;5;${i}m\n"; sleep .02; done # A rainbow in your shell.
mplayer --vf=geq='128+(p(X\,Y)-128)*8' tv:// # Alternate dimension with your webcam. 
mplayer --vf=geq='p(X\,Y)*gt(W/2\,X)+p(W-1-X\,Y)*lt(W/2-1\,X)' tv:// # Another fun video trick. Mirror right side of video to left.
showconsolefont
localectl status  # SEE: https://wiki.archlinux.org/index.php/Keyboard_configuration_in_console
http://forums.fedoraforum.org/archive/index.php/t-289489.html
n=CDEFGAB;l=asdfghj;while read -n1 k;do x=$(tr $l $n<<<$k);play -qn synth pl ${x}3 fade 0 .7 & done # Poly synth. Press asdfghj
strace -e open vpnc # View the 'open' system calls made by a program called vpnc. strace = window into program functionality
perl -e 'for(;;sleep 1){printf"\r"."%.4b "x6,split"",`date +%H%M%S`}' # binary clock
timeDNS() { parallel -j0 --tag dig @{} "$*" ::: 208.67.222.222 208.67.220.220 198.153.192.1 198.153.194.1 156.154.70.1 156.154.71.1 8.8.8.8 8.8.4.4 | grep Query | sort -nk5; } # a function to find the fastest free DNS server
fold -sw 20 <(echo "Long Text to be wrapped with \"\n\"") |sed ':a;N;$!ba;s/ *\n/\\n/g' # Wordwrap long text string using "\n"
awk -F"|" 'BEGIN {OFS="|"} NR==1 {for (b=1;b<=NF;b++) {hdr[b]=$b} } NR > 1 {for (i=1;i<=NF;i++) {if(length($i) > max[i]) max[i] = length($i)} } END {for (i=1;i <= NF;i++) print hdr[i],max[i]+0}' pipe_delimited_file.psv # Show max lengths of all fields in a pipe delimited file with header row
docker stop $(docker ps -a -q); docker rm $(docker ps -a -q) # Docker.io Stop and Remove all processes
netstat -anp | grep :80 | grep ESTABLISHED | wc -l # Get number of established sessions on a given port
debugfs -R  "stat <$(stat --printf=%i filename)>" /dev/sdaX | grep crtime # Get creation date of a file on ext2-3-4 fs
runonchange () { local cmd=( "$@" ) ; while inotifywait --exclude '.*\.swp' -qqre close_write,move,create,delete $1 ; do "${cmd[@]:1}" ; done ; } # Run a command if file/directory changes. Example: `runonchange /etc/nginx nginx -t`; Ignores vim temp files. Depends on 'inotify-tools' for monitoring of file changes. Alternative to tools like 'entr', 'watchr'.
awk '{print $0+0}' <(echo -2; echo +3;) #  Removing leading + sign from numbers. The leading plus sign is removed - Minus sign is left intact.
a=$(b=$(($LINES/2));f() { for c in $(seq $b); do for i in $(seq $c);do echo x;done|xargs echo;done };paste <(f) <(f|tac|tr 'x' '-') <(f|tac|tr 'x' '-') <(f)|tr '\t' ' ');(cat <<<"$a"|tac;cat <<<"$a")|tr '-' ' ' # draw rhomb
watch -n 10 -d eval "sensors | grep RPM | sed -e 's/.*: *//;s/ RPM.*//'" # Periodic Display of Fan Speed with Change Highlights
ssh host -t htop
while :;do printf "\e[%d;%dH\e[48;5;%dm \e[0m" $(($RANDOM%$LINES)) $(($RANDOM%$COLUMNS)) $(($RANDOM%216 )); done
ls -Sharl # Long list all(a) files(l) in CWD, ordering by size(S) ascending(r) and displaying size in human readable form(h)
Dec2Bin=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}); echo ${Dec2Bin[27]} # Decimal to binary conversion in bash
mplayer -ao null -vo null --endpos=0.1 *.mp4 | grep VIDEO # Play enough of the video to get the VIDEO dimensions
find [a-z] -mtime +90 -type f -name '*_log' -exec bzip2 -v9 {} \; # bzip2 compress 90+ day old log files under directories a - z
last -da | awk '{print $1 " " $NF}' | sort | uniq -c # Analyze your whole Linux lastlog to see the different remote hosts for each user

* cd to a dir by passing /path/to/file.txt (assuming you still want to retain the original functionality if you input a directory, and you are using bash):

<pre>
cd() {
    local file="${!#}"

    if (( "$#" )) && ! [[ -d "$file" ]]; then
        builtin cd "${@:1:($#-1)}" "${file%/*}"
    else
        builtin cd "$@"
    fi
}

If you are never going to use cd's options (-P, etc), then this will also suffice:

cd() { 
    if [ -d "$1" ] || [ -z "$1" ]; then
        builtin cd "$@"
    else
        builtin cd "${1%/*}"
    fi
}
</pre>

* Advanced xargs:
<pre>
du1() { find . -mindepth 1 -maxdepth 1 -type d -print0 | xargs -P5 -0 -iFF sh -c '( echo `du -sb "FF"` `du -sh "FF"` | sed -e "s%^\([0-9]*\)\ \([^ ]*\)\ \([^ ]*\).*$%\1 \3 \2%g" )' | sort -n | cut -d ' ' -f2,3 | command grep --color=always '^[0-9\.]*[GMK]'; }

du2() { find . -maxdepth 1 -mindepth 1 -type f | tr ' ' "\n" | xargs -P20 -iFF sh -c 'sed -e "s%^\([0-9]*\)\ \([^ ]*\)\ \([^ ]*\).*$%\1 \3 \2%g" <<< $( echo "`( du -sb FF && du -sh FF ) | tr --squeeze \t\n `" )' | sort -n | tail -n 20 | awk '{print $2,$3}' | tr ' ' "\t";}
</pre>

==World population==
* Fetch the current human population of Earth:
 $ curl -s http://www.census.gov/popclock/data/population/world | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["world"]["population"]'
 #~OR~
 $ curl -s http://www.census.gov/popclock/data/population/world | awk -F'[:,]' '{print $7}'
 $ curl -s http://www.census.gov/popclock/data/population/world | jshon -e world -e population -u
 $ perl -Mojo -E 'say g("http://www.census.gov/popclock/data/population/world")->json->{'world'}{'population'};'
 #~SOURCE: http://www.commandlinefu.com/commands/view/12542/fetch-the-current-human-population-of-earth

==Google Translate==
* Google text-to-speech in mp3 format:
 t2s() { wget -q -U Mozilla -O $(tr ' ' _ <<< "$1"| cut -b 1-15).mp3 "http://translate.google.com/translate_tts?ie=UTF-8&tl=en&q=$(tr ' ' + <<< "$1")"; }
 curl -A "Mozilla" "http://translate.google.com/translate_tts?tl=en&q=$(echo "$@" | sed 's/ /+/g')" | play -t mp3 -
 $ p=$(echo "hello world, how r u?"|sed 's/ /+/g');wget -U Mozilla -q -O - "$@" translate.google.com/translate_tts?tl=en\&q=$p|mpg123 -
 #~SOURCE: http://www.commandlinefu.com/commands/view/12828/google-text-to-speech-in-mp3-format

==OS installed==
* When was your OS installed?
 $ ls -lct /etc | tail -1 | awk '{print $6, $7, $8}'
 #~OR~
 $ df / | awk '{print $1}' | grep dev | xargs tune2fs -l | grep create
 $ ls -ldct /lost+found |awk '{print $6, $7}'
 #~SOURCE: http://www.commandlinefu.com/commands/view/3299/when-was-your-os-installed

==May 2015==
ls /path/to/file.txt ; cd $(dirname !$)  # cd to path
whois root\.com | grep -E "Registrant (City|State|Country)"
curl -s xtof.ch|perl -0777 -pe 's/<.*?>//sg'
echo -e ${PATH//:/\\n}
dig @8.8.8.8 +nocl +nostats +nocomment +recurse +multiline +besteffort +additional +noqr -t ANY xtof.c
dig +short which.opendns.com txt @208.67.220.220 # Check if your ISP is intercepting DNS queries ("#.abc" it's an OK answer) [http://www.commandlinefu.com/commands/view/13142/check-if-your-isp-is-intercepting-dns-queries]
sudo strace -p <PID> -e trace=write -e write=1,2 # hook into stdout and stderr of a running process.
ls -l --time=atime --full-time *.txt # Show the last access time of all files ending with .txt. This may not work on all filesystems/setups.
find . -maxdepth 1 -size 0c -delete # Remove all zero size files from current directory (not recursive).
find . -maxdepth 1 -empty -delete # Remove all zero size files from current directory (not recursive).
taskset -cp <core> <pid> # Change proccess affinity. Set the affinity of a process to a particular core(s). Arguments for processor include a comma separated list, or a range. (example: 1,2 or 0-3). You can use top in smp mode (Press 1) to see the changes to the affinity.
dd if=/path/inputfile | pv | dd of=/path/outpufile # Start dd and show progress every X seconds.
perl -e 'for(;;){@d=split("",`date +%H%M%S`);print"\r";for(0..5){printf"%.4b ",$d[$_]}sleep 1}' # binary clock [http://www.commandlinefu.com/commands/view/7221/binary-clock]
qrencode -s 7 -o qr-wifi.png "WIFI:S:$(zenity --entry --text="Network name (SSID)" --title="Create WiFi QR");T:WPA;P:$(zenity --password --title="Wifi Password");;" # Generate QR code for a WiFi hotspot  [http://www.commandlinefu.com/commands/view/13028/generate-qr-code-for-a-wifi-hotspot]
dpigs  # List your largest installed packages (on Debian/Ubuntu); "debian-goodies" pkg
 -> dpkg --get-selections | cut -f1 | while read pkg; do dpkg -L $pkg | xargs -I'{}' bash -c 'if [ ! -d "{}" ]; then echo "{}"; fi' | tr '\n' '\000' | du -c --files0-from - | tail -1 | sed "s/total/$pkg/"; done
 -> dpkg-query -W --showformat='${Installed-Size}\t${Package}\n' | sort -nr | less
 -> awk '{if ($1 ~ /Package/) p = $2; if ($1 ~ /Installed/) printf("%9d %s\n", $2, p)}'  /var/lib/dpkg/status | sort -n | tail
 #~SOURCE: http://www.commandlinefu.com/commands/view/3907/list-your-largest-installed-packages-on-debianubuntu
while true ; do nc -l 80  < index.html ; done # One command line web server on port 80 using nc (netcat)
 -> nc -kl 5432 -c 'echo -e "HTTP/1.1 200 OK\r\n$(date)\r\n\r\n";echo "<p>How are you today?</p>"'
sed -e "/$USER/d;s/:.*//g" /etc/group # Tells which group you DON'T belong to (opposite of command "groups")
while true; do X=$Y; sleep 1; Y=$(ifconfig eth0|grep RX\ bytes|awk '{ print $2 }'|cut -d : -f 2); echo "$(( Y-X )) bps"; done # Measures download speed on eth0
openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//' # Generate a Random MAC address
 -> hexdump -n6 -e '/1 ":%02X"' /dev/random|sed s/^://g
 -> hexdump -e '1/1 "%02X" ":"' /dev/urandom -n 6 | head -c 17 # Sometimes prints "*"!
    -> for i in `seq 1 10`; do hexdump -e '1/1 "%02X" ":"' /dev/urandom -n 6 && echo -e "\n" | head -c 17; done
    -> head -c 6 /dev/urandom | hexdump -C | head -n 1 | cut -d  ' ' -f 3-8 | tr ' ' ':' # No "*"s!
 -> od -An -N10 -x  /dev/random  | md5sum | sed -r 's/^(.{10}).*$/\1/; s/([0-9a-f]{2})/\1:/g; s/:$//;'
 #~SOURCE: http://www.commandlinefu.com/commands/view/6619/generate-a-random-mac-address
rename 's/\d+/sprintf("%04d",$&)/e' *.jpg # Numeric zero padding file rename
 -> ls *.jpg | awk -F'.' '{ printf "%s %04d.%s\n", $0, $1, $2; }' | xargs -n2 mv
 -> for i in $(seq -w 0 100) ; do mv prefix$(( 10#$i )).jpg prefix${i}.jpg ; done
 #~SOURCE: http://www.commandlinefu.com/commands/view/8383/numeric-zero-padding-file-rename
dmesg -T|sed -e 's|\(^.*'`date +%Y`']\)\(.*\)|\x1b[0;34m\1\x1b[0m - \2|g' # dmesg with colored human-readable dates
namei -m $(pwd) # Show permissions of current directory and all directories upwards to /
 -> dir=$(pwd); while [ ! -z "$dir" ]; do ls -ld "$dir"; dir=${dir%/*}; done; ls -ld /
 #~SOURCE: http://www.commandlinefu.com/commands/view/11037/show-permissions-of-current-directory-and-all-directories-upwards-to-
sort -g -o list.txt{,} # sort the contents of a text file in place
 -> sort -g -o list.txt !#:$ # history expansion
 -> sort -g list.txt -o !#:2
 -> sort -g list.txt -o !^ # '!^' => first arg; '$_' => last arg
bind -P | grep -v "is not" | sed -e 's/can be found on/:/' | column -s: -t # List all bash shortcuts
compgen -A function # List bash functions defined in .bash_profile or .bashrc
 -> declare -F | cut -d ' ' -f 3
 -> typeset -f
 -> set | fgrep " ()"
 -> declare -F | sed 's/^declare -f //'
nmap -sP 192.168.1.0/24; arp -n  | grep "192.168.1.[0-9]* *ether" # find all active IP addresses in a network
tail -f file | while read; do echo "$(date +%T.%N) $REPLY"; done # Annotate tail -f with timestamps
 -> tail -f file | ts '%H:%M:%.S'
for i in ?.ogg; do mv $i 0$i; done # convert single digit to double digits
 -> rename 's/\d+/sprintf("%02d",$&)/e' -- $@
(find /one -print0; find /two -print0)|tar cvf backup.tar --null -T - # Use a subshell to generate a complex list of files for tar
dpkg --print-architecture
mat -d /path/to/file.jpg
findmnt
lscpu || chcpu
tarcat # concatenates the pieces of a GNU tar multi-volume archive
while :; do play -qn synth sin 14k trim 0 0.75 vol .8 ; sleep $((RANDOM % 4 + 3))m ; done # Poor man's annoy-a-tron. 3 - 6 min interval.
rename 's/_(\d{4})(\d{2})(\d{2}).txt/_$1-$2-$3.txt/' *_????????.txt # Rename set of files with non-hyphenated date to be hyphenated.
base64 -d<<<TVRoZAAAAAYAAQABAYBNVHJrAAAAOgD/UQOAAAAAkEV/CIBFfwCQRX8IgEV/AJBKfwiASn8AkEx/CIBMfwqQSX8IgEl/AJBKfwiASn//LwA= |timidity - # Log!
cut -c1-3 boot.log | uniq -c # (Unrotated log) Count the number of lines per month in boot.log.
du -ch --exclude=./relative/path
echo "ibase=10;obase=16;500000"|bc # ibase = input base 10; obase = output base 16 => 7A120 => 07 A1 20

==June 2015==
gpg --gen-random --armor 1 8  # generate a random password n characters long
 -> strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo
 -> strings /dev/urandom | tr -cd '[:alnum:]' | fold -w 30 | head -n 1
 -> pwgen 8 1
 -> cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 8
 -> openssl rand -base64 8
 -> openssl rand -hex 10
 -> python -c 'import string,random;print "".join(random.SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(16))'
echo $(cat /dev/urandom | base64 | tr -d "=+/" | dd bs=32 count=1 2> /dev/null) # create generic token following GCE standard
 -> dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null
ps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed "/^ 0.0 /d" # Processes by CPU usage
 -> top -b -n 1 | sed 1,6d
python -c "import crypt, getpass, pwd; print crypt.crypt('password', '\$6\$SALT\$')" # Generate a password hash (change 'password' and 'SALT' values)
 -> perl -e 'print crypt("password","\$6\$SALT\$") . "\n"'
 -> openssl passwd -1 # OpenSSL (note: this will only make md5crypt.  While better than plantext it should not be considered fully secure)
 -> mkpasswd --method=SHA-512 --rounds=4096 # On Debian/Ubuntu (via the package "whois")
function google { Q="$@"; GOOG_URL='https://www.google.de/search?tbs=li:1&q='; AGENT="Mozilla/4.0"; stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}" | grep -oP '\/url\?q=.+?&amp' | sed 's|/url?q=||; s|&amp||'); echo -e "${stream//\%/\x}"; } # Google verbatim search on your terminal
 -> Q="YOURSEARCH"; GOOG_URL="http://www.google.com/search?q="; AGENT="Mozilla/4.0"; stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}\"${Q/\ /+}\"" | grep -oP '\/url\?q=.+?&amp' | sed 's/\/url?q=//;s/&amp//'); echo -e "${stream//\%/\x}"
twistd -n web --path . # Serve current directory tree at http://$HOSTNAME:8080/
 -> python -m SimpleHTTPServer
echo $(($(blockdev --getsz /dev/sdXXX)*512/4096 - 35)) # Calculate the block number at the end of the drive
tree -a -L 1 --inodes /path # Display inodes
xxd -p source | fold -w2 | paste -sd' ' | sed "s/A/B/g" | xxd -p -r > destination # Binary search/replace
cmp -l foo.mid bar.mid | gawk '{printf "%08X %02X %02X\n", $1, strtonum(0$2), strtonum(0$3)}' # Binary diff
 -> diff <(xxd foo.mid) <(xxd bar.mid)
 -> diff <(od -An -tx1 -w1 foo.mid) <(od -An -tx1 -w1 bar.mid)
 #   -An removes the address column. This is important otherwise all lines would differ after a byte addition / removal.
 #   -w1 puts one byte per line, so that diff can consume it.
 #   -tx1 is the representation you want, change to any possible value, as long as you keep 1 byte per line.
sort -V ipv4addrs.txt # In GNU sort, you can use -V (version sort) to also sort IPv4 addresses numerically according to each class.
find /dev/disk/by-id -type l -printf "%l\t%f\n" | cut -b7- | sort # Show drive names next to their full serial number (and disk info)
grep MemTotal: /proc/meminfo | awk '{printf("MemTotal: %d MB\n", $2/1024)}' # Display how much memory install on system
nmcli connection status <UUID> # network connection status
if [[ $(expr $(date +%s) - $(stat -c %X /var/lib/apt/periodic/update-success-stamp)) -gt 86400 ]]; then # debian based OS update apt/dpkg only if it hasn't been updated in N time
printf '=%.0s' {1..100} # repeat a character
cat -vet file.txt # show non-Unix characters
 -> tr -d '\r' < file.txt # delete "cr" characters
YOUTUBE: allinurl:[your word here] site:youtube.com/watch
du -h *.png --total|tail -n1
identify -format "%wx%h" image.png # get image dimensions
 -> php -r "print_r(getimagesize('/path/to/image.png'));"
 -> mediainfo image.png
 -> exiftool image.png
 -> exiv2 image.png
 -> feh -l image.png
 -> less image.png # less (with lessfile/lesspipe) displays image info by using ImageMagick in the background
 -> convert image.jpg -print "Size: %wx%h\n" /dev/null
echo $((0xff)) # => 255 # convert hexademicals
echo $PATH | sed 's/\(\/[^:]*\).*/\1/g' # get first path
echo "foo bar baz" | sed 's/\(\b[a-z]\)/\(\1\)/g' # => (f)oo (b)ar (b)az
echo $var | grep -Eq "^[0-9]{1,}$"; echo $? # check if $var is an integer
 -> if [[ $(echo "$var" | grep -Eq "^[0-9]{1,}$"; echo $?) -ne 0 ]]; then echo "$var" is not a number; exit 1; fi
# cacademo || cacafire || img2txt -W 30 -f html tux.png > tux.html || cacaview tux.png
cat /proc/cmdline # view current arguments passed to kernel at boot time
bvi foo.png # binary vim
 -> dhex foo.png
lnav # ncurses-based log file viewer <http://lnav.org/>
pkexec # Execute a command as another user
telnet towel.blinkenlights.nl # ASCII "Star Wars"
asciiquarium
factor 55 # get the prime factors of any number
figlet LINUX # ASCII art
fortune -s # get a fortune
hash # print out how many times you have used a given command for the given shell session
hello # friendly greeting program
cmatrix # simulates the display from "The Matrix"
s2ram # suspend laptop <http://suspend.sourceforge.net/>
[ $( date -d 'next day' +%d ) == 1 ] && echo 'its the end of the month' # True on last day of the month. Useful in cron and other places.
strings -n1 file.bin # By default, strings will only show data if there are 4 or more consecutive ASCII chars, you can reduce this with -n
date -d "$(grep finish /proc/mdstat |sed -e 's/^.*finish=//;s/ .*$//;s/\..*$//')min" # Figure out when your md-raid will finish.
for mc in http://goo\.gl/{A,a}{B,b}9{X,x}0 ; do curl -sI $mc | grep Location: && echo $mc ; done # Try all upper/lower case combos of url.
OS=$(uname -s | tr '[:upper:]' '[:lower:]')
head -c 32 /dev/random | base64 # generate a random 32-character string
for i in $( ls | grep [A-Z] ); do mv -i $i `echo $i | tr 'A-Z' 'a-z'`; done # rename all filenames from upper- to lower-case
watch -n1 'ps -p 1761 -o pid,comm,etime,cmd' # watch a given PID
ls *[![:lower:]] # Any filename that does not end with a lowercase letter.
 -> [[:upper:]][[:upper:]]*
 -> BACKUP.[[:digit:]][[:digit:]]
 -> foo???
for i in $(seq -f "%05g" 10 15); do echo $i; done

# Rename:
# FROM: "Introduction___Networking_tutorial_(1_of_13)-qHzZUmP1vvON.mp4"
#   TO: "nettut-01_of_13_-_Introduction-qHzZUmP1vvON.mp4"
for f in *.mp4; do \
  [[ $f =~ ^(.*)___Networking_tutorial_\(([0-9]+)_of_13\)-(.*)$ ]]
  mv "$f" "nettut-$(printf "%02d" ${BASH_REMATCH[2]})_of_13_-_${BASH_REMATCH[1]}-${BASH_REMATCH[3]}"
done

echo $(($((`date +%s`/86400))-$(sudo awk -F: /^root/'{print $3}' /etc/shadow))) # number of days since the root password was last changed
for file in *.txt; do mv "$file" "${file/ (*)/}"; done # rename all "001 (1).txt"-type files to "001.txt" (i.e., remove parentheses)
 -> ls -d -- *\(*\)* | sed 's/\(.*\) (.*)\(.*\)/mv -- "&" "\1\2"/'
 -> rename -v 's/ \(.*\)\./\./' ./*.txt
 #see_also: http://linux.icydog.net/rename.php
tmux new-session \; split-window -l 5 -d 'tail -F /var/log/syslog' # New tmux session, split window w/ 5 (4) line tail of syslog at bottom.
[?] ack -l 'searchedString' | xargs -o -p -n8 vim -p # Open files containing "searchedString" in Vim tabs, eight at a time
zcat large.log.gz | awk '{print $0 | "gzip -v9c > large.log-"$1"_"$2".gz"}' # Breakup compressed log by syslog date and recompress. #awksome
gzip -c large.log | ssh user@hostwithbigdisk 'cat > /dir/large.log.gz' # Compress and ssh transfer a log that has filled a filesystem.
du -s $( date -d "yesterday" +/netflow/%Y/%m/%d ) # Check the size of yesterday's netflow data directory using date format technique.
pmap PID -x
alias hideprev='history -d $((HISTCMD-2)) && history -d $((HISTCMD-1))' # Hide the previous command you just ran
montage -size 1500x$((300 / 6 + 1)) xc:{red,orange,yellow,green,blue,indigo} -mode Concatenate -tile 1x twitter.png # pride flag!
touch -- -file_starts_with_dash.txt && rm -- -file_starts_with_dash.txt
rm !(*.c|*.py) # remove all files in cwd _except_ *.c and *.py files
touch -d "2am" two_am.txt && touch -d "yesterday" gestern.txt # create files with timestamps at a specific date/time (verify with `stat`)
find . -newer ../temp1 ! -newer ../temp2 -exec cp '{}' ./bkup/ ';' # cp all files newer than temp1 but older than temp2 into /bkup
touch -d "9am" start.tmp && touch -d "5pm" end.tmp; find . -newer start.tmp ! -newer end.tmp -exec cp {} /path/to/bkup \; # copy all files in a given directory that were modified during your current workday (e.g., those changed between 9am and 5pm today)
dd if=/dev/zero of=/tmp/output.img bs=8k count=256k conv=fdatasync; rm -rf /tmp/output.img # test disk write speed
man $(ls /bin | shuf | head -1) # display a random man page
!!:gs/foo/bar # repeat last command but globally replace 'foo' with 'bar'
ffmpeg -f x11grab -s wxga -r 25 -i :0.0 -sameq /tmp/out.mpg # Capture video of your desktop
 #   -f x11grab makes ffmpeg to set the input video format as x11grab. The X11 framebuffer has a specific format it presents data in and it makes ffmpeg to decode it correctly.
 #   -s wxga makes ffmpeg to set the size of the video to wxga which is shortcut for 1366x768. This is a strange resolution to use, I'd just write -s 800x600.
 #   -r 25 sets the framerate of the video to 25fps.
 #   -i :0.0 sets the video input file to X11 display 0.0 at localhost.
 #   -sameq preserves the quality of input stream. It's best to preserve the quality and post-process it later.
 # You can also specify ffmpeg to grab display from another x-server by changing the -i :0.0 to -i host:0.0.
ffmpeg|avconv -i input.flv output.mp3
 -> avconv -i input.flv -ab 32k output.mp3
echo cmd | at midnight # Execute a command at midnight
dd if=/dev/dsp | ssh username@host dd of=/dev/dsp # Output your microphone to other computer's speaker
ffmpeg|avconv -f oss -i /dev/dsp output.mp3 # record audio from your laptop's mic
 -> cat /dev/dsp >outputfile; cat outputfile > /dev/dsp
[?]sox -t ossdsp -c 2 -w -s -r 44100 /dev/dsp -t wav - | oggenc - -o test.ogg
 -> sox -t ossdsp -c 2 -w -s -r 44100 /dev/dsp -t wav - | lame -h -k - test.mp3
cat </dev/tcp/time.nist.gov/13 # get current UTC time from NIST.gov

# Download a URL:
$ exec 5<>/dev/tcp/www.xtof.ch/80
$ echo -e "GET / HTTP/1.0\n" >&5
$ bash$ cat <&5

http://www.tldp.org/LDP/abs/html/procref1.html # /proc informatioin

mount -t tmpfs -o size=1024m tmpfs /mnt # Create and mount a temporary RAM partition
find /proc/${PID}/exe -printf '%l\n' # Find the name of the process running under the given PID
netstat -s | grep "packets received"
procinfo
ssh user@host cat /path/to/remotefile | diff /path/to/localfile - # Compare a remote file with a local file
curl -u user:pass -d status='Tweeting from the shell' http://twitter.com/statuses/update.xml # tweet from CLI
man 7 ascii

http://www.catonmat.net/blog/yet-another-ten-one-liners-from-commandlinefu-explained/
http://www.catonmat.net/blog/another-ten-one-liners-from-commandlinefu-explained/
http://unix.stackexchange.com/questions/6/what-are-your-favorite-command-line-features-or-tricks
http://www.tldp.org/LDP/abs/html/index.html

rpcinfo

img2txt -W 20 ~/tmp/tstorms.png

==July 2015==
type eval
find / \( -nouser -o -nogroup \) -ls # Find files on the entire filesystem for which there is no corresponding user or group.
echo -e "\xE2\x98\xA0" # echo unicode characters in console
 -> echo -n ☠ | hexdump -C
 -> echo -e '\u2234'
 -> echo ü | hexdump | awk '{print "\\x"toupper(substr($2,3,4)) "\\x"toupper(substr($2,0,2)) "\\x"toupper(substr($3,3,4))}' | head -1
 -> echo -e "\U02620" | xxd # => "0000000: e298 a00a" => "e2 98 a0"; convert to HEX
 -> printf "%b" '\U02620\n'
showconsolefont # Show the current EGA/VGA console screen font
unicode_start || unicode_stop
gucharmap
meld # Visual diff and merge tool for the GNOME Desktop
[?] xe(){ curl "http://www.xe.com/wap/2co/convert.cgi?Amount=$1&From=$2&To=$3" -A "Mozilla" -s | sed -n "s/.*>\(.*\) $3<.*/\1/p";} # Currency converter using xe.com
find ~/podcasts -type f -mtime +7 -delete # Delete podcasts older than 7 days.
convert -delay 20 -loop 0 *.jpg newgif.gif # Make a gif out of all jpg's in a directory
grep "phpmyadmin" $path_to_access.log | grep -Po "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}" | sort | uniq | xargs -I% sudo iptables -A INPUT -s % -j DROP # Ban all IPs that attempted to access phpmyadmin on your site
ifconfig -a | grep -Po '\b(?!255)(?:\d{1,3}\.){3}(?!255)\d{1,3}\b' | xargs nmap -A -p0- # Nmap scan every interface that is assigned an IP
(echo 'GET /'; echo; sleep 1; ) | telnet www.google.com 80 # Download a file from a webserver with telnet 
 -> /usr/bin/printf 'GET / \n' | nc www.google.com 80
wmctrl -pl | grep $(pidof mpv) | cut -d'-' -f2- # Prints the window title of current mpv session to display what is playing
vim +'set ff=unix' +wq file.txt # dos2unix
 -> tr -d '\r' < input.file > output.file
 -> perl -pi -e 's/\r\n/\n/g' input.file
 -> sed 's/$'"/`echo \\\r`/" input.txt > output.txt # unix2dos
 -> sed 's/^M$//' input.txt > output.txt
find . -type f  -name '*.java' -exec sh -c 'iconv -f cp1252 -t utf-8 "$1" > converted && mv converted "$1"' -- {} \; # Change the encoding of all files in a directory and subdirectories
atq | sed 's_\([0-9]\{1,8\}\).*_\1_g' | xargs atrm # Remove all `at` jobs
curl -s http://cbsg.sourceforge.net/cgi-bin/live | grep -Eo '^<li>.*</li>' | sed s,\</\\?li\>,,g | shuf -n 1 # Corporate random bullshit generator (cbsg)
tr -dc a-z1-4 </dev/urandom | tr 1-2 ' \n' | awk 'length==0 || length>50' | tr 3-4 ' ' | sed 's/^ *//' | cat -s | fmt # Generate random text
i=$(curl -s server/nginx_stats); IFS=$'\n'; i=($i); a=${i[0]/Active connections: } && a=${a/ }; r=${i[2]# [0-9]* [0-9]* }; echo "Active: $a, requests: $r" # Parse nginx statistics output
fac() { (echo 1; seq $1) | paste -s -d\* | bc; } # Compute factorial of positive integer <http://www.bashoneliners.com/oneliners/oneliner/195/>
__=`sensors | grep Core` && echo \(`echo $__ | sed 's/.*+\(.*\).C\(\s\)\+(.*/\1/g' | tr "\n" "+" | head -c-1`\)\/`echo $__ | wc -l` | bc && unset __ # Get average CPU temperature from all cores.
lsof / | awk '{ if($7 > 1048576) print $7/1048576 "MB" " " $9 " " $1 }' | sort -n -u | tail # Show 10 largest open files
dig +short myip.opendns.com @resolver1.opendns.com # Extract your external IP address
 -> curl ipecho.net/plain
 -> curl icanhazip.com
 -> curl curlmyip.com
 -> curl l2.io/ip
 -> curl ip.appspot.com
 -> curl ifconfig.me/ip  # JSON: curl ifconfig.me/all.json
 -> dig +short my.ip @outsideip.net
sed -i 18d .ssh/known_hosts # Remove offending key from known_hosts
[[ $(find /path/to/file -type f -size +51200c 2>/dev/null) ]] && echo true || echo false # Check if a file exists and has a size greater than X
git ls-files | xargs wc -l | awk -F ' +|\\.|/' '{ sumlines[$NF] += $2 } END { for (ext in sumlines) print ext, sumlines[ext] }' # Count the lines of each file extension in a list of files
find /some/path -type f ! -perm -111 -ls # Find files that are not executable
resolveip -s www.xtof.ch # resolve hostname to IP our vice versa with less output
tail -f FILE | perl -pe 's/KEYWORD/\e[1;31;43m$&\e[0m/g' # coloured tail
cat somefile.css | awk '{gsub(/{|}|;/,"&\n"); print}' >> uncompressed.css # Uncompress a CSS file
nslookup -q=txt -class=CHAOS version.bind NS.PHX5.NEARLYFREESPEECH.NET # Check version of DNS Server
find /var/logs -name * | xargs tar -jcpf logs_`date +%Y-%m-%e`.tar.bz2 # Archive every file in /var/logs
curl -s http://www.mininova.org/rss/ubuntu | xmlstarlet sel -N atom="http://www.w3.org/2005/Atom" -t -m './/enclosure' -v '@url' -n | wget -i - # Read RSS from CLI
df -lP | awk '{sum += $3} END {printf "%d GiB\n", sum/2^20}' # sum filesytem used space
 -> df -lP | numsum -3 | numprocess /%$(( 2**20 ))/
convert -density 300 IN.eps -resize 600x400 -transparent white OUT.png # convert from PostScript to PNG
espeak "Hello"
mailq |awk '/^[0-9A-F]+/{print $1}' |while read id; do postcat -q $id |grep -qi 10\.4\.5\.6 && postsuper -d $id;done # Rm msgs from Q by IP
find . -mmin -60 -xdev -ls # Find less than an hour old files in CWD or below without crossing into other partitions. (-xdev)
echo "hello, climagic" | od -t x1 -A"n" | tr "\n" " " | tr -d " " # hexdump-stream
seq 0 9 | shuf -n 1 # range random
less -S <text_file> # wordwrap for less
let "rand = RANDOM % 9"; echo $rand # Range random
watch -n .2 <bash_script> # Crude live testing script as you save
tput rmam; <any-command>; tput smam # disable wordwrap
cat file1 | tr "[A-Z]" "[a-z]"  # Change all uppercase letters in a file to lowercase
vimtutor # Learn to use vim
cut -f 1 -d: /etc/passwd # Get the usernames from /etc/passwd
ps -ef | grep defunct | awk '{print $2}' | xargs kill # Kill defunct processes
watch -n 5 "ls -l something.pid" # Check every 5 seconds if something.pid exits and it's last access and size
for i in {1..254}; do host 192.168.0.$i; done # Do a reverse DNS lookup of all hosts in 192.168.0.0/24
tcpdump -ni eth0 icmp # Check if this machine is being pinged
egrep -o "\b[a-zA-Z0-9\.\+-]+@[a-zA-Z0-9\.-]+\.[a-zA-Z0-9\.-]+\b" mbox | sort -u # Get a List of all Emailadresses in your MBox file.
cat list | sed -e "N;N;s/\n/,/g" > list.csv # Collapse groups of 3 lines to 1 line and seperate the values by commas
export TMOUT=300 # terminate the shell if no activity in 5 minutes, security people like this on ssh connections
gem install cheat; cheat strftime # get cheat sheets on popular topics from http://cheat.errtheblog.com
put "git blame $@" into ~/bin/git-praise and now you can run 'git praise' instead of 'git blame'
cat http://bigfile.zip  | funzip | grep alice > alice.txt # funzip can uncompress piped zipfiles
LC_ALL=C grep -F pattern file # speed up grep with a fixed string search and optimal localization
seq 9 | pr -tas" " --columns 3 # fold a file into 3 columns (row ordering)
 -> seq 9 | pr -ts" " --columns 3 # fold a file into 3 columns (column ordering)
tr '"' "'" < file # replace double quotes with single quotes without the usual quoting nightmare
tac log | less # page through a log file in reverse to avoid guessing number of lines to tail
uniq -w 12 -c log # use uniq to count lines with common prefixes. For example timestamps in log files
rev file | column -t | rev # print a file in a tabular format (right align). Set delimiter with -s
 -> column -t file # print a file in a tabular format (left align). Set delimiter with -s
echo "two" | cat -nE one - three
TZ=America/Chicago date '+%FT%T.%N%:z'
 -> perl -MPOSIX -le '$t=strftime "%Y-%m-%dT%T%z", localtime; $t =~ s/..$/:$&/; print $t'
 -> date --rfc-3339=seconds
openssl s_client -connect google\.com:443 # telnet / tcp debugging via SSL
while read -d $'\0' -r file; do printf 'File found: '"'%s'"'\n' "$file"; done < <(find . -iname '*type*' -print0)
 -> find . -maxdepth 1 -type f -print0 | xargs -0 -I@ echo @ | sed -n '/type/p'
 -> find . -maxdepth 1 -type f -print0 | while IFS= read -r -d '' -r myfile; do echo "${myfile}" | sed -n '/type/p'; done
 -> find . -type f -name '*.*' -printf '%p\0' | tar --null -uf archive.tar -T -
 -> find . -maxdepth 1 -name '*.mp4' -exec sh -c 'echo "$0"' {} \;
 -> find -exec cmd 1 {} ";" -exec cmd 2 {} ";"
 -> while read -rd $'\0' file; do
      something with "$file"
    done < <(find  . -type f -name '*.*' -print0)
 -> exec 9< <( find "$absolute_dir_path" -type f -print0 )
    while IFS= read -r -d '' -u 9; do
        file_path="$(readlink -fn -- "$REPLY"; echo x)"
        file_path="${file_path%x}"
        echo "START${file_path}END"
    done
echo -e "foo\nbar\nbaz\n"| tee >(grep o > o.out) >(grep r > r.out) >(grep z > z.out) > /dev/null # http://mywiki.wooledge.org/ProcessSubstitution
 -> (echo "YES")> >(read str; echo "1:${str}:first";)> >(read sstr; echo "2:$sstr:two")> >(read ssstr; echo "3:$ssstr:three") # http://wiki.bash-hackers.org/syntax/expansion/proc_subst
lynx --dump http://www.whatismyasn.org/
for f in images/*.JPG; do t=${f##*/}; convert $f -resize 640 ${t%.JPG}.png; done # reduce image size for websites
du -sh */ | sort -h # Show directory size and sort by human readable amount (MB, GB, etc.). Requires fairly recent version of GNU sort.
tr A-Za-z N-ZA-Mn-za-m <<<"Guvf Gjrrg sebz @pyvzntvp unf orra jvguuryq va erfcbafr gb n ercbeg sebz gur pbclevtug ubyqre" # rot13
while read; do ipcalc $(awk '{print $1}' <(echo "$REPLY")) | awk '/^Network:/ {print $2}' done < sorted_address.txt
od -An -w999 -t xC <<< "Hellobar%dsf?q=foo" | sed 's/[ ]\?\(c[23]\) \(..\)/%\1%\2/g;s/ /\\\\\x/g'| xargs echo -ne # urlencode
mplayer input.mp3 -ao pcm:file=output.wav ; oggenc output.wav # convert mp3 to ogg format
exec 5<>/dev/tcp/time.nist.gov/13; cat <&5 & cat >&5; exec 5>&- # Read and write to TCP sockets with common bash tools
pyt() { youtube-dl -q --max-downloads 1 --no-playlist --default-search ${2:-ytsearch} "$1" -o - | mplayer -vo null /dev/fd/3 3<&0 </dev/tty; } # Search and play youtube videos directly to terminal (no X needed)
 -> pyt() { id=$(curl -s 'https://www.youtube.com/results?search_query='$(tr \  + <<<"$1") | grep -om3 '"[[:alnum:]]\{11\}"' | awk NR==3 | tr -d \"); youtube-dl -q 'https://www.youtube.com/watch?v='"$id" -o - | mplayer -vo null /dev/fd/3 3<&0 </dev/tty; }
pvl() { (for i in "$@"; do youtube-dl -q --max-downloads 1 --no-playlist "$i" -o - | mplayer -vo null /dev/fd/3 3<&0 </dev/tty; sleep .5; done); } # Play online music videos in terminal
sort -s -b -t' ' -k 4.9,4.12n -k 4.5,4.7M -k 4.2,4.3n -k 4.14,4.15n -k 4.17,4.18n -k 4.20,4.21n access.log* # Sort Apache access.log by date and time
echo "text to prepend" | cat - file
lsblk -do name,model,serial # Show drive names next to their full serial number (and disk info)
f=$(($RANDOM%5900+100));play -qn synth sin $f trim 0 0.75 vol .1;read -p "Hz(100-6000)? " g;printf "Hz=$f; Off by %d\n" $((f-g)) # Hz game.

==August 2015==
grep Rackspace /usr/share/wireshark/manuf
dig +noauthority +noquestion +nostats xtof.ch @dns1.stabletransit.com # query "authoritative answer" (aa) for absolute TTL
 -> dig +noauthority +noquestion +nostats xtof.ch # non-authoritative answer (i.e., caching DNS server). TTL value decreases for each query until 0.
 -> dig +nssearch host.example.com # get a list of authoriative answer DNS servers
 -> host -t soa xtof.ch # Get Start of Authority Resource Record (SOA)
ls -l /usr/local/{s,}bin # Long list contents of two directories at once. Same as ls -l /usr/local/sbin /usr/local/bin
sed 's/^[^@]\+$/&@example.com/' emails.txt |tr '\n' , # Add @example.com to the end of lines that don't have @ in them and join em w/ ,s
r=$((RANDOM%4096));c=$(echo "obase=16;$r"|bc);display -size 300x300 -title '' xc:"#$c";read -p "Color? " g;echo "Color was $c" # Color Game
curl -s xkcd\.com/1560/ |sed -n 's/.*bubblegum.png.*title="\([^"]\+\)".*/\1/p' |pee "html2text -width $COLUMNS" "wc -w" # count words #xkcd
echo "obase=2;255"|bc # base 10 to binary
var=$(<file); echo ${#var} # print number of characters in file
 -> awk 'BEGIN{FS=""}{for(i=1;i<=NF;i++)c++}END{print "total chars:"c}' file
 -> ruby -0777 -ne 'print $_.size' file # includes newline character
 -> wc -m file # includes newline character
 -> stat -c%s file # includes newline character
 -> echo "foobar"|od -ta # includes newline character
iconv -c -f utf-8 -t ascii input.txt > output.txt # clear all non-ASCII characters
look foo # display lines beginning with a given string
date -d '2010-04-16 + 1946 days' # The -d option in `date` lets you specify a date to display (delta days)
awk -F, '/FAILURE/{print $5}' 2FA-log.csv |while read ip; do printf "$ip "; geoiplookup $ip; done |grep -v -e " US," # "Foreign" 2FA fails
fetchmail --ssl --keep -u youremail@yourmaildomain imap.server # Fetch a copy of your IMAP inbox and send it to your localhost mailserver.
awk -F[\\t/] '{l=substr($4,0,1);a[l]+=$1}END{for (i in a){printf "%s %10d\n", i, a[i]}}' userdiskstats.txt |sort # Sum stats by user letter
gzip -v9 -c /var/log/maillog > /root/maillog.gz # Out of space? Compress large log to other filesystem, then delete & move the old log back.
http://levien.com/type/myfonts/inconsolata.html
 -> http://hivelogic.com/articles/top-10-programming-fonts
 -> http://www.lowing.org/fonts/
ps auxwwf | less +/[1]9797 # View process table in tree format and search directly to 19797 (the pid), avoiding this command itself.
rsync -nav -e ssh /etc root@remotehost:/etc # Just see what files under /etc are different between the local host and remotehost.
grep -h LoadModule *.conf | awk '{print $NF}' | xargs ls > /dev/null # Check which Apache modules aren't installed.
:%! awk '{print $2}' # In vim command mode, this will replace ALL the text in the buffer with just the second column from the buffer.
diff <(sed 's/-[0-9].*$//' old-rpms.txt) <(sed 's/-[0-9].*$//' new-rpms.txt) | grep '< ' # Show most of the rpms I'm missing on new server.
ls -l *.txt| { wc -l; [ $? -eq 5 ]; }
fc -nl -10 0 | sed -r 's/^\s+//' > script.sh # Save the last 10 commands that you ran to a file called script.sh. sed trims the whitespace. (note: `fc` is a Bash builtin.)
command -v git # POSIX standard alternative to `which`
 -> type git
 -> which git
while ls *.gz*;do for i in *.gz*;do [ -f ${i/.gz/} ]||gunzip -f -c $i > ${i/.gz/} && rm -vf $i ;done; done # unzip all zips \,,/(^_^)\,,/
awk '$9~/^[45]/' *-access_log.2015* | wc -l # Count the total number of invalid (4xx and 5xx status) requests in 2015 on all websites.
awk '{sum+=$10} END {print sum}' *-access_log.2015* # Show the total bandwidth consumed by websites so far in 2015.
ls -l /home | awk '$3~/^[0-9]+$/' # Print out home directories owned by users without a valid password entry.
atq | sort -k6n -k3M -k4n -k5n # Show at jobs, but sort them by the time of day.
find /home -uid -500 -o \( -gid -500 -a \! -gid 100 \) # Find any files under /home owned by system accounts/groups, except users (gid=100)
find -L /etc -type l # Find broken symbolic links under /etc.
 -> python>>> import os.path; os.path.islink('initrd.img') # https://docs.python.org/2/library/os.path.html#os.path.islink
stdbuf # Run COMMAND, with modified buffering operations for its standard streams
 -> stdbuf -i0 -o0 -e0 ./tests/tests 2>&1 | tee log # <http://unix.stackexchange.com/questions/56634>)
 -> tail -f access.log | stdbuf -oL cut -d ' ' -f1 | uniq # immedidately display unique entries from access.log
man -s 2,3 mkdir search only system calls (2) and library (3) man pages
date --date=yesterday +%d

==September 2015==
play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +30 fade h 1 86400 1 # Pretend you are on a starship
ls "foo bar" 2>&1 > /dev/null | grep -o !#:1 # You've seen `echo *` list your files, but have you seen `ls` echo text?
 -> echo "foo bar" baz | grep -o !#:2
awk '{print "\x27" $1 "\x27,"}' file # use \x27 to specify a single quote character using hexadecimal escaping
pppstats | cut -d" " -f2 | tail -n +2 | xargs printf "%s/2^20\n" | calc -p | cut -f2 | xargs printf "Use: %s MB\n" # 3g dongle bandwidth
f=(*.mp3); mpg123 "${f[@]:50" # Start playing music files with the 51st file in (0 indexed). Good for when wildcards would be too complex
s2both || s2ram || s2disk
combine(1) - combine sets of lines from two files using boolean operations
curvetun - lightweight curve25519-based multiuser IP tunnel
for n in 30 41 41 38 41 9999 31 30;do for t in {0..2200};do [[ $(($t%$n)) == 0 ]]&&echo -n $'\xb0'||echo -n $'\x80';done;done>/dev/dsp # snd
cat </dev/tcp/time.nist.gov/13 # Fetch the current time in bash using this special device path hostname/port.
HISTCONTROL="ignoreboth" # In bash, this sets the history to ignore commands starting with spaces and duplicates. May already be set.
rpm -qa --last | head # Show the last 10 packages installed on an RPM based host.
{xsel -b || pbpaste} | sort # Send paste buffer into sort. Because your {Cloud} based document editor lacks this basic functionality.
zcat *access_log*.gz |cat - *access_log* |awk '$9==400||$9==413{print $1}' |sort |uniq # Show remote hosts who received HTTP 400s or 413s
for d in */; do echo -n "$d "; file -b "$d"/* |cut -d' ' -f1 |sort| uniq -c| sort -rn|head -1; done # Most common type of file per subdir.
df -PB1 | awk '/level0/{sum+=$2} END {print sum/2^30 " GiB"}' # Find the total disk space allocated to filesystems with level0 in name.
for i in log.{1..99}.gz;do new=$(date -d "$(stat -c %y "$i")" +%Y%m%d );mv "$i" log-${new}.gz;done # Fix logs to be dateext rotation format
watch -n 10 '{ uptime ; free ; df -h; }' # Watch a few commands together every 10 seconds. Quotes, whitespace and ending ; are important.
tail -f maillog | awk '{c++;t=substr($0,0,12);if (t!=ot){print c " " ot; c=0;ot=t}}' # Print log lines per minute stats in real time.
xterm -geometry 120x50 -ti vt240 -e 'curl climagic\.org/SIXEL/time.six;/bin/sh' # SIXELS, if your xterm supports it.
for d in {2..254}; do ip addr add 172.16.8.$d dev eth0; done # Add all IPs for subnet range to eth0. For listening on whole subnet. Careful!
rpm --dbpath=/oldserverbackup/var/lib/rpm -q perl-Date-Manip # Specify an alternate rpm database path using --dbpath.
sed -n '1p;$p' # Print the first and last line of stdin.
 -> echo -e "foo\nbar\nbaz" |sed -n '1p;$p'
display -size 300x300 xc:'#8080FF' # display a specific colour
colrm # remove columns from a file

==October 2015==
pdfcrop -margins "10 10 10 10" figure.pdf figure-crop.pdf
echo "obase=2;ibase=16;5A" | bc # ascii -x|grep Z #=> 5A
tolower(){ echo ${@,,}; } # Make function command 'tolower' that will convert all arguments to lowercase.
find ~/ -mindepth 2 -type f -ls | sort -n -r -k 7 | head -20 # Show the 20 largest files at least 2 subdirectories down from your home dir
awk '!a[$0]++' file # Remove duplicate lines without sorting 'file'. $0 means whole line in awk. 'a' is an array. So print if not in array.
 -> awk '{if (t!=$0){print;t=$0}}' file # Remove duplicate lines *without sorting*. Low memory version. That !a[$0]++ construct can get big.
sed -s -i '1s,/local/bin/perl,/bin/perl,' *.pl # Replace path to perl in .pl scripts. Use , delimiter instead of / for easier reading.
grep -P -o "(?<=sent=)[0-9]+" mail.log | awk '{sum+=$1} END {print sum}' # Produce sum of sent bytes in the mail.log. Uses PCRE.
*** http://lights.climagic.com/
biff # Be notified in the terminal when you receive e-mai
time cat # Instant stopwatch. Run to start timer and press Ctrl-D to stop it. "real" time is the elapsed time.
rpm -qa | grep -e http -e php -e mariadb | xargs rpm -V # Quickly check the integrity of the "AMP" stack on rpm based systems.
tail -f udp.log |gawk '{printf("%s %s\n",strftime("%Y-%m-%d_%T", $1),$0)}' # Prefix the epoch time in column 1 with the local time.
yes "$(seq 231 -1 16)" | while read i; do printf "\x1b[48;5;${i}m\n"; sleep .02; done # rainbow in shell
find /etc -type f -mtime +2 -mtime -30 -ls # Long list files under /etc that were modified between 2 and 30 days ago.
exec -l $SHELL # restart your shell

==November 2015==
for (( i = 0; i < 17; i++ )); do echo "$(tput setaf $i)This is ($i) $(tput sgr0)"; done # explore colours of your terminal
t=$(($(tput cols)/3));for FR in $(seq $(tput lines));do printf "\e[44m%${t}s\e[47m%${t}s\e[41m%${t}s\e[0m\n";done # French Flag
oneworld=$(curl -s http://artscene.textfiles\.com/vt100/globe.vt);while :;do pv -L4242 -q <<<"$oneworld";sleep .1;done # Globe animation
traceroute linux.fi |awk '($2~/[.]/){"geoiplookup "$2 |getline g;$0=sprintf("%-64s %s", $0, g)}{print}' # GeoIP traceroute
printf "1800-01-13 +%s months\n" {0..4800} |date -f - |grep ^Fri |awk '{print $NF}' |uniq -c |grep " 3 " # Show years with 3 Fri 13ths
 -> printf "now +%s months\n" {0..240}| date -f - |grep ^Fri # Find all Friday 13ths in the next 20 years.
zcat dump.sql.gz | sed -n '5000,7500p' > newdump.sql # Put lines 5000 through 7500 from a large compressed SQL file into a new file.
topuniq(){ sort | uniq -c | sort ${@:--rn} ; } # A similar top uniq, which defaults to reverse numeric sort of count if no options given.
 -> sus(){ sort | uniq -c | sort $@; } # Make a function to shorten this commonly used command line pattern & allow for options for final sort.
rsstail -u $FEEDURL -n 50 | while read line; do mail -s "FeedUpdate" $user <<<"$line"; done # Sending new RSS entries to email
vimtutor # Learn to use vim.
HISTIGNORE="history;ls;date;w;man *" # In bash, this will leave history, ls, date, w and man whatever out of your command history.
for t in "Wake up" "The Matrix has you" "Follow the white rabbit" "Knock, knock";do pv -qL10 <<<$'\e[2J'$'\e[32m'$t$'\e[37m';sleep 5;done
sleep 6h 52m ; yes wakey wakey | espeak -
last -da | grep -v ^autologinuser # Check the whole last login log, but filter out that annoying user that must login every minute.
for p in *.tiff; do convert -quality 75 -scale 50% "$p" "${p%%.tiff}.jpg"; echo converted $p; done # Convert tiff images to rescaled jpg
sort -k4 *.log |sed -n '/15\/Aug\/2015:14:11:02/,/20\/Aug\/2015:02:34:58/p' |cut -d" " -f1|sort|uniq|wc -l # Count uniq hosts in time range.
for w in {1..104} ; do date -d "now - $w weeks" +%Y-%m-%d ; done # Last 2 years of this weekday.
 -> t=$(date +%s);n=0;while [ $n -lt $((86400*365*2)) ];do n=$(($n+86400*7));date -d @$(($t-$n)) +%Y-%m-%d;done # Last 2 years of this weekday
tmux attach -t 2 # Pick up where you left off on tmux session 2. tmux list-sessions to see what's available.
TZ=UTC-1 date +"(%S + (%M * 60) + (%H * 3600))/86.4" | bc # Calculate the current Swatch Beat time.
n=0;while : $((n++));do printf "%0${n}d"|grep -qP "^0?$|^(00+?)\1+$" ||echo $n;done # Find primes using PCRE

==December 2015==
x=0;y=0;while [[ $y -lt 500 ]] ; do xdotool mousemove --polar $x $y ; x=$(($x+4));y=$(($y+1)); sleep 0.01; done # Move mouse in spiral.
scp(){ [[ "$@" =~ : ]] && /usr/bin/scp "$@" || echo 'You forgot the colon!'; } # Wrapper function to catch a common scp mistake.
printf ".\n.\n.\n.\n.\n.\na\na\nb\nb\nb\nc\nc\n" | sort -R # Run multiple times and this will demonstrate how sort -R is different from shuf
 -> #sort -R and shuf are not the same. sort -R will keep groups of duplicate lines together. shuf treats all lines equally when randomizing
shuf -n5 names.txt # Pick 5 random lines (names in this case) from a file called names.txt.
ssh -L 9909:192.168.1.1:80 home # Connections to tcp localhost:9909 will be made to 192.168.1.1:80 via SSH tunnel to home.
acthuman(){ h=$(date +%H);case $h in 8|12|17) sleep 1h;; 22|23|0) sleep 8h;; *) sleep $((5+$RANDOM%60));; esac; } # Random human like pauses
shrug(){ echo -n "¯\_(ツ)_/¯" | (xsel||pbcopy);echo "¯\_(ツ)_/¯ copied to your clipboard"; } # Function to help with an emoji.
play -q -n synth sq F2 sq C3 remix - fade 0 5 .1 norm -4 bend 0.5,2477,3 fade 0 5 0.8 # THX-like sound. play is from the sox package.
trap 'v=$((! v));' SIGUSR1 # Then do kill -USR1 PIDOFBASH to flip the state of the variable v. Could be useful in loops, turn on/off a print
mapfile -t files < <(ls -1); echo ${files[@]}
http://mewbies.com/acute_terminal_fun_07_misc_fun_on_the_terminal.htm

==January 2016==
while true; do for i in 02E{{9..5},{6..8}}; do printf "\u${i}O=o>";sleep 0.09;printf "\b\b\b\b\b";done;printf "_";done # Pave the road.
echo "ibase=10;obase=12;2016" | bc # In the #dozenal system, we've entered a new dozenal century (biquennium).
seq 1 1008 | awk '{if (2016%$1==0){print $0 "x" (2016/$1)}}' # Or find another terminal resolution that equals 2016.
ab -n 100 -c 10 "http://www.poorwebsite\.com/" # Use the apache benchmarking client to make 100 requests, 10 at a time and get the results.
n=1;sort -t: {1..8},$((n++)) ipv6-addrs.txt # Sort full IPv6 addresses. (Note: Will not work with shortened notations.)
curl -Ls http://climagic\.org/uxmas/14
tail -F /var/log/syslog | awk '{printf("\033[%dm%s\033[0m\n",31+NR%2,$0)}' # Holiday sysLog! Its ready for the new year too. ;)
( seq 1 8 200 ; seq 6 8 200 ) | sort -n | xargs -I{} -n 1 dig +short -x 206.214.251.{} # Star Wars Episode IV in Reverse DNS.
echo "Only $((16#F)) days left until $((16#7E0))" # Convert hex to dec on the fly.
find . -maxdepth 1 -type d -ls # Long list only the directories under the current directory.
mping(){ ping $@|awk -F[=\ ] '/time=/{t=$(NF-1);f=2000-14*log(t^18);c="play -q -n synth 1 pl "f"&";print $0;system(c)}';} # mping yahoo\.com
tshark -ip{1,2}p{1..4} -w 20160115.pcap # Use brace expansion to easily specify a list of 8 interfaces to listen on. p1p1 - p2p4
while :;do wget http://example\.com/exposed -O exposed-$(date +%Y%m%d%H%M%S)||break;sleep 1h;done # Get data and timestamp til 40X status
csplit sections.txt '/^$/' {*} # Split a file into multiple using an empty line as the split point. {*} means do this until the end.
awk '$10==404 {print $7}' access_log # Print out the file requested for CLF log entries with HTTP 404 status code.
dpkg -S $( which notify-send ) # Find which Debian package the notify-send program is included with -> libnotify-bin
rpm -qf $( which lspci ) # Pass the output of which (showing path to lspci) into rpm's -qf, which tells you the pkg.
rsync --bwlimit=200 src dest # Do an rsync and limit the bandwidth used to about 200 KBytes/sec. Useful on shared or slow links.
comm -12 <(sort names1) <(sort names2) # Determine what lines two different files have in common. The comm program requires sorted files.
for i in IMG_3[0-4]*.JPG ; do convert -quality 60 -geometry 300 $i thumbs/$i ; done # Make thumbnails of images IMG_3000.JPG - IMG_3499.JPG
split -b 1G verylargefile split # Split a file called largefile into 1 gigabyte pieces called split-xaa, split-xab, split-xac ...
 -> cat split-xaa split-xab split-xac > rejoinedlargefile # Join the splits back together.
nc -q1 -lvp 1234 < file.txt # poor man's file serve. Use nc serverhost 1234 > output.txt to retrieve file from remote host. NAT bugs this.
du -ma | sort -nr | head -n 20 # List the 20 largest files or folders under the current working directory.
shasum *.jpg | awk {'print $1'} | sort | uniq -c | grep -v " 1 " # Find out if any duplicate image files exist in the current directory.
lsb_release -a || cat /etc/redhat-release # Show Linux distro release information or die trying.
paste <(cal 2015) <(cal 2016) # Look at the full year calendar for 2013 and 2014 side by side. (Requires term width > 135).
egrep -v "^#|^$" httpd.conf # display the httpd.conf file contents and exclude blank lines and lines that start with comment character.
ps auxw | grep "[h]ttpd" | wc -l # Count the number of web server processes running. Or use (pgrep -c httpd)
while true;do N=$(($RANDOM % $COLUMNS));for i in $( seq 1 $N );do echo -n " ";done;echo \*;done # Snow storm in the terminal
xrandr -o inverted # You might want to use this command to flip your X display for the next one. xrandr -o normal flips back.
wput -u file ftp:// username:password@myhost.com/path/to/ file # upload files to a server using ftp protocol.
echo addr show|ip -o -b -|cut -d' ' -f2,7 # Show IPv4 and IPv6 addresses per interface in Linux.
reptyr <pid> # reptyr can be used to reattach a program on another tty to the current tty so you can transfer it into screen/tmux.
sponge | grep needle # Sometimes I like to paste data to grep on stdin, problem is output can interweave with the input. Use sponge + Ctrl-D
socat -v UDP-LISTEN:8161,fork TCP:localhost:8161 # Encapsulate UDP packets in a TCP stream so it can be tunneled through an SSH tunnel, etc
declare -a array=($(tail -n +2 /proc/net/tcp | cut -d":" -f"3"|cut -d" " -f"1")) && for port in ${array[@]}; do echo $((0x$port)); done # check open ports without netstat or lsof
docker inspect --format "{{ .Name }} # {{ .NetworkSettings.IPAddress }} # {{ .NetworkSettings.Ports }}" $(docker ps -q) | tr -s '#' '\t' # List every docker's name, IP and port mapping
cat < /dev/tcp/67.207.152.20/80
echo one 22 three | awk -F'[0-9][0-9]' '{print $2}' # use regex as a field separator
echo "$(( $(( $(grep 'physical id' '/proc/cpuinfo' | uniq | wc -l) * $(grep 'core id' '/proc/cpuinfo' | wc -l) )) * 2 + 1 ))" #  Calculate CPU load limit on GNU/Linux
 # shell order of operation example which calculates:
 # x = number of physical CPU's
 # 2(x * y) + 1 = CPU load limit
echo "BTC rate is" $(wget https://api.bitcoinaverage.com/ticker/global/EUR/ -q -O - | jq ".last") "?" # Global BTC rate in EUR
btc() { echo "1 BTC = $(curl -s https://api.coindesk.com/v1/bpi/currentprice/$1.json | jq .bpi.\"$1\".rate | tr -d \"\"\") $1"; } # Check the current price of Bitcoin (jq version, defines a function)
 -> echo "1 BTC = $(curl -s https://api.coindesk.com/v1/bpi/currentprice/usd.json | grep -o 'rate":"[^"]*' | cut -d\" -f3) USD"
echo "quit" | openssl s_client -connect facebook.com:443 | openssl x509 -noout -text | grep "DNS:" | perl -pe "s/(, )?DNS:/\n/g" # Get the SAN (subjectAltName) of a site's certificate
exiv2 -k -F rename *.jpg # Use the exiv2 EXIF program to rename your jpg files according to their exif date/time data.
extr_mp3(){ ffmpeg -i $1.flv -f mp3 -ar 44100 -ac 2 -ab 192k -y -acodec copy $1.mp3; } # Extract MP3 from FLV function.
convert +level-colors Firebrick, me.jpg oldme.jpg
ngrep -d eth0 -i 'select' port 3306 # Show the query and results of 'select' queries going to your mysql server. Won't work on socket conns
lsof -i TCP:80 # Show what processes are using port 80 either locally or remotely. Need to be root for unowned processes.
fold -w 72 -s draft.txt > newdraft.txt # Wrap the lines of draft.txt at 72 characters wide, doing so at spaces, not middle of word (-s)
while :;do curl -Ls "X\.com"|md5sum;sleep 5m;done|awk '{if(NR>1&&l!=$1){system("echo the site changed|mail -s NOTIFY you@isp\.net");};l=$1}'
ethtool -p eth0 # Blink eth0's LED so you can find it in the rat's next of server cables. Ctrl-C to stop.
saveurl() { cat > /dev/null; } # Save a url for reading later when you "have time". Also try https://devnull-as-a-service.com/ 
ps aux|tail -n+2 |sort -nrk4 |head -$(($(tput lines)-1)) |cut -c 1-$(tput cols) # Display top RAM using processes. Browser is probably #1

==February 2016==
n=CDEFGAB;l=asdfghjqwertyu;while read -n1 k;do [[ $k =~ [${l:7}] ]]&&o=4||o=3;x=$(tr $l $n$n<<<$k);play -qn synth pl ${x}${o} fade 0 .7&done
tail -F syslog |while read -r line;do printf "\033[38;5;%dm%s\033[0m\n" $(($RANDOM%255)) "$line";done # Random color per log line.
ls -la --full-time |tr -s " " |cut -f6 -d " "|cut -c1-7 | sort | uniq -c # Make month histogram of dates of files in current directory.
echo 'man $(ls /usr/bin | shuf -n 1)| sed -n "/^NAME/ { n;p;q }"' >> ~/.bashrc # Learn a command on each new shell open
awk '$9 == "404" {print $7}' access.log |sort|uniq -c|sort -rn| head -n 50 # list top 50 404's in descending order
vim scp://user@server1//etc/httpd/httpd.conf # Edit a file on a remote server using vim from your local *nix desktop
play -n synth sine 480 sine 620 remix 1-2 fade 0 0.5 delay 0.5 repeat 5 # And you probably haven't heard one of these in a while
play -n synth sine A sine F remix 1-2 fade 0 5 # With this command you can generate a U.S. dial tone using sox play
sleep 3m; xmessage -nearmouse "Your tea is ready" # Quick popup notification command after 3 minutes
espeak -a 200 -s 20 -p 65 [[nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn 2> /dev/null&sleep 1.75;for i in {1..7};do espeak -s 350 -a 200 $(shuf -n1 -e schtk schtktk schtktktk schschtktktktk schschtktktktktk schschtktktktktktk schschschtktktktktktktk schschschtktktktktktktktk schschschtktktktktktktktktk schschschtktktktktktktktktktk) 2> /dev/null;sleep 0.$(($RANDOM % 3 + 2));done
echo "obase=16;ibase=10;40" | bc # You can use the bc command to convert base 10 numbers to base 16 (hexadecimal). Tip: Specify obase first.
echo $((0x28)) # Convert hexadecimal number 28 to decimal 40. Can also do echo $((16#28)) for the conversion
date -d @192179700 # Turn a Unix epoch time back into a human readable date. Feature of GNU date
while :; do echo beeww beeeeooooowwwww dun dun dun dun brtbrtbrt | espeak --stdout | play - pitch -400 bend .3,-600,.3 ; done
while ! curl -m 10 http://www.example\.com/ ; do echo still down ; sleep 1m ; done ; play alarm.wav # Play alarm.wav once site is back
exiv2 -k -F rename *.jpg # Use the exiv2 EXIF program to rename your jpg files according to their exif date/time data.
base64 --decode <<<VGhlIGZ1bGwgd29yZCAtLWRlY29kZSBvcHRpb24gaXMgbW9yZSB1bml2ZXJzYWwgdGhhbiAtZCAoTGludXgpIG9yIC1EIChCU0QvTWFjKQo=
finger seattle@graph.no # ASCII weather
ionice -c 3 cp vm1.img vm1-clone.img # Copy a file using "ionice -c 3" to give it idle priority to reduce load on the system.
fdupes -r dir > dupes.txt # Find file duplicates in 'dir' recursively based on size and mdsum and log to dupes.txt
todo(){ cd ~/.todo||return 1&& l=$(ls -1t|head -n1)&&t=$(date +%Y%m%d);[[ "$1" == "last" ]]&&cp $l $t; ${EDITOR:-vi} $t;cd -;} # Todo list.
pianobar
comm -3 <(ls -1 dir1) <(ls -1 dir2) # Compare the contents of 2 dirs. Show only 2 columns, each for files unique to the directory
iwlist wlan0 scan | egrep "Cell|ESSID|Encryption|Quality" to get most information for Wi-Fi networks
qalc "145Gibyte / 1.35(Mibyte/second) to day" # How many days will it take to transfer 145GiB at 1.35MiB/sec?
watch -n1 cat /proc/net/wireless # Monitor your wireless card signal strength on the screen.
pandoc -o proposal.docx proposal.txt # Want to write a word doc without the fuss? Make a TXT, Markdown, etc. & convert.
cat longdomainlist.txt | rev | sort | rev # group subdomains by domain
diff <(grep = config.txt) <(grep = config.txt-new) # Compare just the assignment lines of two config files that use = for value assignment.
du -cms .[^.]*/ */ | sort -rn | head # Show the 10 largest directories at top level along with total usage. All in megabytes.
ps aux | awk '{if ($8=="Z") { print $2 }}' # On Linux, print out a list of the process IDs that are in the zombie state.
dd if=/dev/cdrom of=image.iso ; mkdir CDroot ; mount -o loop image.iso CDroot ; cd CDroot # Mount a CDROM disc from its ISO image file.
fliptable(){ echo "（╯°□°）╯ ┻━┻"; } # 20 years ago IBM supercomputer Deep Blue defeats Garry Kasparov in chess for the first time.
mplayer -vo png -ss 3:46 -frames 20 stairs.mp4 # Write out 20 png format frames from a video starting at 3 minutes, 46 seconds.
exiftool -v '-Directory<DateTimeOriginal' -d %Y . # Move photos with EXIF data to directories by year created/taken. Be verbose.
zcat access_log*.gz |cat - access_log |awk '{print $7}' |sed 's/\?.*//' |sort|uniq -c|sort -nr # Get list of top URLs from all logs combined
df -Pl -t ext3 -t ext4 | tail -n+2 | awk '{ sum+=$3 } END { print sum/2**20 }' # Print disk space used on all ext3 or 4 FS in GiB.
PS1="# $PS1" # Make your prompt safer with # so that if you accidentally copy & paste it, it doesn't run.
ls -Sr1 | while IFS=$'\n' read -r file; do xz "$file"; done # Compress files with xz in PWD according to size, starting with smallest.
git log --date=short --format="%ci"|awk '{print $1}'|uniq # Which days I've worked
alias hideprev='history -d $((HISTCMD-2)) && history -d $((HISTCMD-1))' # Hide the previous command you just ran and forgot to use space.
printf "\e[%dm%d dark\e[0m  \e[%d;1m%d bold\e[0m\n" {30..37}{,,,} # Show your basic terminal text colors for terminal preferences change.
http://www.vurt.ru/2013/02/python-command-line-oneliners/
http://find.unixpin.com/ # CLI helper
printf "%s\n" ',s/foo/bar/g' wq | ed -s myfile.txt # in-line editing of files

==March 2016==
seq 20 | shuf # Generate a random ordered list of 20 numbers. For example to determine order of presentation.
find . -exec file -b --mime-type {} + | sort | uniq -c | sort -nr # Make stats of the top file types in this directory and below.
shopt -u huponexit # in bash, set this option to make sure backgrounded jobs don't get killed when the parent shell exits
pgrep rsync | xargs ionice -c3 -p # Adjust all rsync processes on the system so that they have lower (idle) IO priority.
ps wu -U someuser # An easy way of selecting the processes owned by someuser.
curl -sL https://www.drownattack\.com/top-sites |html2text|awk -F\. '/^[0-9]+/{print $NF}' |sort|uniq -c|sort -nr # Drownattack TLD stats
cal 9 1752 # Stump your friends. How many months had only 19 days? Answer: 1 (When we switched to Gregorian. Actual month depends on locale)
(head -5; tail -5) < log # Show the first and last 5 lines of the file 'log'
:let i = 1 | g/|Population=/s/|Population=/\=printf("|Data5=%d|Population=", i)/ | let i = i+1 # vim add column Data5=N with an inc. number
pidstat 2 5 # Show % reports of CPU statistics for every active task in the server at two second intervals
for f in *; do b=$(echo "$f" | tr '[A-Z]' '[a-z]'); mv "$f" "$b"; done # Lower case all files in a folder
yes "$(seq 19 21; seq 21 -1 18)" |while read i; do printf "\x1b[48;5;${i}m\n"; sleep .03; done # Make some waves. Req 256-color term
find . -maxdepth 1 -type f -printf '%TY-%Tm\n' | sort | uniq -c # counts files in the current path by modification month
awk '{ print substr($0, index($0,$3)) }' mail.log # Print all from 3rd field to end of line. Very useful for log parsing
fgrep --binary-files=text -C 2000 "string in file" /dev/sda > recovereddata.out # *"Attempt"* to recover an accidentally removed file
export LESS='-sCmqPm--Less--(?eEND:%pb\%.)' # Make less more like more, but still more than more. Percent of file in prompt, etc.
export LESS="-S -j10 -i" # This environment variable will invoke 'less' with these options when it is used. Like when viewing a man page
TEXT="measure the length of this text" ; echo ${#TEXT} # One way to print out the length of text using a variable
rpm -qa --queryformat "%{NAME} %{INSTALLTIME:date}\n" | grep "Nov 2015" # In RPM, determine which packages where installed in Nov 2015
find music -name '*.mp3' -mtime +365 -a -size +10M -ls # Find and long list mp3 files in Music dir older than a year and larger than 10MB
identify -format "%f F:%[EXIF:Flash]\n" *.jpg | egrep " F:(0|16|24|32)$" # Show photo filenames where no flash was used. Req. Imagemagick
curl -N --limit-rate 16K http://f.climagic\.org/techsup.mp3 | mpg123 - # Stream mp3 at bitrate speed (128Kbits). WARNING: NSFW "lyrics"
egrep -wo "(Donnie|Frank|Roberta|Grandma)" story.txt |sort|uniq -c|sort -r # Search for names and build a frequency count for each name
df -lP |awk '{sum += $3} END {printf "%d GiB\n", sum/2**20}' # Show the total space used on all your local disk partitions
for dir in */ ; do echo "${dir%/}" ; done # Use the */ trick to get only the directories, then use ${dir%/} to remove the trailing / you get
grep -P -o '(?<=href=")http:\S+(?=")' *.html # Use perl regex (negative look-behind/look-ahead assertions) to get URLs
convert -size 1280x720 plasma:green-blue background.png # Create a 1280x720 color plasma image. Different each time. Uses ImageMagick
strings /dev/urandom | tr -c -d '0-9' | dd of=randomnumbers.txt bs=1 count=1M # Write 1MB (1048576) of random numbers to a file
sed "/bang/ s/foo/bar/" # Replace foo with bar only on lines that contain 'bang'. Use in pipeline or with file args
Server: nc -l 8762 < video.mpg Client: nc server 8762 | mplayer -cache 1000 - # Poor man's video streaming service at video bitrate
rig # rig is this cool little program that generates random identities
play -n synth pl G2 pl B2 pl D3 pl G3 pl D4 pl G4 delay 0 .05 .1 .15 .2 .25 remix - fade 0 4 .1 norm -1 # Guitar strum. play is from sox pkg
sudo shutdown -h 60 & mpg123 ambientmusic/*.mp3 # Play music for 60 minutes and then shutdown. Like sleep on alarm clock
less +F filename.log # Using +F option or pressing F in less is similar to `tail -f filename.log` but can use less's features
:set paste # In vim, when you want to paste in code, its often useful to 'set paste' so that the autoindent/syntax doesn't interfere
vi macro: qajjddq # Record a macro called 'a' that moves down two lines (jj) and then deletes 1 line (dd). Run w/ @a, run 100 times 100@a
curl -4 http://wttr\.in/ # weather
 -> curl http://v2d.wttr.in/Seattle
find . -empty -type d # List of empty subdirectories of current directory
diff <(openssl rsa -in my.key -modulus | grep Modulus) <(openssl x509 -in my.crt -modulus | grep Modulus) # Check if cert was signed by key
alias hideprev='history -d $((HISTCMD-2)) && history -d $((HISTCMD-1))' # Hide the previous command you just ran and forgot to use space
printf "\e[%dm%d dark\e[0m \e[%d;1m%d bold\e[0m\n" {30..37}{,,,} # Show your basic terminal text colors for terminal preferences change
curl 'http://web.host/IMG_0[001-105].jpg …' -o "trip#1.jpg" # Download images named IMG_0001.jpg through IMG_0105.jpg and save with different name
cut -d, -f1,5,10-15 data.csv > new.csv # Use cut to print out columns 1, 5 and 10 through 15 in data.csv and write that to new.csv
ionice -c 3 cp vm1.img vm1-clone.img # Copy a file using "ionice -c 3" to give it idle priority to reduce load on the system
fdupes -r dir > dupes.txt # Find file duplicates in 'dir' recursively based on size and mdsum and log to dupes.txt
awk -F: {'print $1 ":" $2'} messages |uniq -c # Count syslog hits per minute in your messages log file. Useful for doing quick stats
todo(){ cd ~/.todo||return 1&& l=$(ls -1t|head -n1)&&t=$(date +%Y%m%d);[[ "$1" == "last" ]]&&cp $l $t; ${EDITOR:-vi} $t;cd -;} # Todo list
for i in $(seq 4 65);do echo -n "${pi:0:$i}.com: ";whois ${pi:2:$((i-2))}.com|grep --col=no "rant Na"||echo;sleep 5;done #pi domain owners
pi=$( echo "scale=1000;4*a(1)" | BC_LINE_LENGTH=1004 bc -l ) # Happy Pi Day! Calculate π to 1000 digits using bc and assign it to pi
convert -size 413x314 xc:tan -fill red -pointsize 200 -gravity center -draw "text 0,0 '3.14'" -flop pie.png # Req. ImageMagick #pi #piday
Tip: Sending a Ctrl-| (SIGQUIT signal) to a running ping command in Linux will print out brief summary output. Try Ctrl-T on BSDs.
ps ax -o state -o ppid | awk '$1=="Z"{print $2}' | xargs kill -9 # Kill all #zombies on the system
tail -f /dev/ttyACM0 |gawk '{print strftime("%Y-%m-%d %T") " " $0)}' |tee temperature.log # Arduino temp sensor to timed logfile and view
echo ${USER:0:${#USER}/2} # You can use arithmetic inside bash variable expansions, such as this to get the first half of your username
touch -r oldfile newfile # set access/modification times of newfile to those of oldfile
t=$((COLUMNS*LINES-COLUMNS));r=$((RANDOM%t));printf "\e[32m";for i in $(seq $t);do [[ $i == $r ]]&&printf "🍀"||printf "☘";done # find 4-leaf
ls -ld ???? # Long list the files/directories with only 4 characters by using 4 match any single character patterns (?)
echo ｙoυrｂａｎｋ.com | hexdump -c # Check a domain to make sure its all the ASCII characters you expect and not Unicode look-a-likes
yes "$(seq 231 -1 16)" | while read i; do printf "\x1b[48;5;${i}m\n"; sleep .02; done # A rainbow in your shell
lsof -Pan -i tcp -i udp # Show all programs listening TCP/UDP ports. You may want to run this with superuser privileges

==April 2016==
find /usr -name '*.wav' -size -75>snds;for i in $(seq 1 13 600);do at "now + $i minute" <<<'play "$(shuf snds|head -1)">/dev/null 2>&1';done
for f in *.mp4; do echo "processing $f"; bname=$(basename $f); ffmpeg -i "$f" "$bname.wav"; done # Convert MP4 to WAV
sudo bash -c 'swapoff -a && swapon -a' # After killing processing using up all your RAM on Linux (Firefox!!), move processes off of swap.
sudo fdisk -l /dev/sd? # Show partitions of only physical SCSI/SATA/SCA drives and not other things like device mapper entries.
n=({A..G}{2..6});r=$((RANDOM%${#n[*]}));play -qn synth pl ${n[$r]} trim 0 1;read -p "[A-G]?" g;[[ "$g" == "${n[r]:0:1}" ]]&&echo y||echo n
tail -f /dev/ttyACM0 |gawk '{print strftime("%Y-%m-%d %T") " " $0)}' |tee temperature.log # Arduino temp sensor to timed logfile and view.
HEAD -E https://www.raspberrypi.org/
http://fretmap.com
for i in *.jpg;do printf "$i %s\n" $(convert "$i" -scale 1x1\! -format '%[pixel:u]' info:- ) ;done |tee -a color-indexes.txt # Major colors
watch -n 0.5 "ps uf -C process1,process2" # Continually watch processes with names
timeout 1h tcpdump -n -i eth0 -w network.pcap not host 192.168.1.5 # Use timeout to only run a command for a set amount of time (1hour)
[Meta-.] # Live insert the last word from the previous command in history into current line. Can repeat to go further. Not the same as !$.
~.[Enter] # If SSHd two-levels deep and host goes down, this will get you out of the host
while :;do rec -t raw /dev/null rate 32k silence 1 0.1 2% 1 0.0 2% && ping -c 1 home;sleep 1; done # Ping home when mic "hears" something.
for i in *.jpg;do printf "$i %s\n" $(convert "$i" -scale 1x1\! -format '%[pixel:u]' info:- ) ;done |tee -a color-indexes.txt # Major colors
PROMPT_COMMAND="play -qn synth sin G3 trim 0 0.1" # Audio prompt. Could also use different notes/melodies for various return codes.
curl -H "Host: http://www.example.com " http://example.climagic\.org/config.php # Change the host header to bypass the DNS.
exiftool -all= foo.jpg # Remove all exif metadata from a photo
oneworld=$( curl -Ls http://bit\.ly/globe_vt );while sleep .1;do pv -L4220 -q <<<"$oneworld";done # ASCII globe animation
curl -sr 0-1024 www.nasa\.gov/images/content/618486main_earth_full.jpg |strings # View image metadata without downloading whole 16MB image
:n and :p # When using multiple file arguments with less or vi, you can use :n and :p to go next file (n) and prev file (p) in list.
script /tmp/unix-session.log # session logger

==May 2016==
sudo mlabel -i /dev/sdg1 -s ::"Backups" # Rename the filesystem label on a USB thumb drive to Backups
last -da | grep -vE "^(root|reboot|asmith) " # See the last logged in users, but filter out entries for root, reboots and asmith.
man dpkg | sed -n '/Doctal/,/2000 /p' # Pipe the output of the man command into other commands to trim down the "insane amounts of drivel"
strace -e open openssl s_client -crlf -quiet -starttls smtp -connect smtp.example\.com:25 # Use strace to show the files openssl is opening.

echo 1.01^365|bc -l => 37.8
echo 0.99^365|bc -l => 0.03

echo $(( ( $( date +%s ) - $( date -d "now - 7 years" +%s ) ) /86400 )) # Calculate 7 years ago in days, accounting for leap years
find . -xdev -type f -mtime +$((365*7)) -print0|xargs -0 du -bsc|awk '/\ttotal$/{s+=$0}END{print s}' # Total bytes of files older than ~7 yr
sudo lsof +D /var/lib/apt/lists # Show what files or filehandles are open in the specified directory
mplayer -vf rotate=1 video.mp4 # Rotate a video taken by a "smart"phone user 90 degrees CW. Or just for fun. Try rotate=2 for CCW
exiftool <(curl -s apod.nasa\.gov/apod/image/1605/NGC5078-LRGBhager2048.jpg) |grep Software # See what software was used for an image

==June 2016==
(espeak || say || cat) <<<No
curl wttr\.in/Moon # See the current phase of the moon in your terminal. New feature of wttr.in
echo "fuzzbuzz" | sed -e 's/u/i/2' # Replace the 2nd occurrence of a regex match
elinks -dump bit\.ly/qutWZK|tr -d ,|sed -e '/^2014/q'|awk '/^[12]/{p=$6/$2*100; printf "%d %0.4f%%\n",$1,p}' # % US pop. murdered 1960-2014
o="-vvvvvv";for i in 0 {2..7}; do c="aptitude ${o:0:$i} moo";echo "$ $c"; $c; done # Discover the Super Cow Powers of aptitude
grep -Ev "((accept|drop|reject)log|ftpd)" /var/log/messages | less # Yes! You can do nested grouping in extended regexes
powertop # Will show you the top power consuming processes on your Linux laptop.
fatrace
dig RandomDomainNameThatDoesNotExistLLC\.com @4.2.2.2

==July 2016==
awk -F, '{sqrt($4^2)}' data.csv # Get the absolute value of the 4th column of numbers using the square root of the square trick.
 -> echo "1,2,3,-4,5" | awk -F, '{print sqrt($4^2)}';
stdbuf -i0 -o0 ping 8.8.8.8 | while read l; do echo "[$(date '+%H:%M:%S')] $l"; done # Prefix lines with timestamp.
tail -f access.log | stdbuf -oL cut -d ' ' -f1 | uniq # This will immedidately display unique entries from access.log
head -1 data.csv | tr , $'\n' | nl # Print the number and column name to help write awk expressions.
xmodmap -e "remove Lock = Caps_Lock" -e "keycode 66 = Escape" # In X, use xmodmap to turn your Caps Lock into an Escape key
echo "scale=1000;4*a(1)*2" | BC_LINE_LENGTH=1004 bc -l | cut -c1-629 # Happy Tau (τ) day!
curl -I http://langs.eserver\.org/latin-terms.txt | grep Last-Modified # Check the last modified date of a file on a web server.
scrot # screen capture
t=$(($(tput cols)/3));for FR in $(seq $(tput lines));do printf "\e[44m%${t}s\e[47m%${t}s\e[41m%${t}s\e[0m\n";done # French Flag
sudo tcpdump -l icmp[icmptype]=icmp-echo | awk '{if (!arr[$3]){print $3;arr[$3]++}}' # Show new pingers. -l makes tcpdump linebuffered
n=0;while : $((n++));do printf "%0${n}d"|grep -qP "^0?$|^(00+?)\1+$"||echo $n;done #Find primes w/ PCRE
scanimage --format=tiff --mode Color | convert tiff:- ~/Scans/$(date "+%Y-%m-%d_%H:%M:%S").jpg # Scan directly w/ cur date
usps_status(){ elinks -dump tools.usps\.com/go/TrackConfirmAction?qtc_tLabels1=$1 |sed -n '/Status of Item/{n;p;q}'; } # Shipment status
awk '$9!~/^[23]/{print $4}' access_log | cut -c1-12 | uniq -c # Show the number of UNsuccessful requests per day. (Not HTTP code 2XX or 3XX)
find . -name '*s_log*'|xargs cat|sort -k4n -t' ' -k 4.9,4.12n -k 4.5,4.7M -k 4.2,4.3n -k 4.14,4.15n -k 4.17,4.18n -k 4.20,4.21n >mergedlogs
find /var/www -perm -o+w -a -not -type l -ls # Find files and directories under /var/www that are world writable. Exclude symbolic links.
echo epoch day $(( $( date +%s ) / 86400 ))
curl -s http://www.coindesk\.com/price/ |grep bpiUSD |sed 's/<\/\?[^>]\+>//g' |tr -d " \t\r" #bitcoin prices in USD
*/3 * * * * if [[ -z $(pgrep offlineimap) ]]; then offlineimap -u quiet; fi # run a cron script only if it is not already running
find . -name \*.[ch] -exec grep -sl "PATTERN" {} \; # Search for PATTERN in .c and .h file
find / -type f | sed 's,/[^/]*$,,' |sort |uniq -c | awk '$1>=33000' # Find directories that have 33000 or more files in them
^-l^^ # If you just ran a command like unzip -l http://archive.zip  to see the contents, you can use ^-l^^ to run again without the -l

==August 2016==
(echo 'GET /'; echo; sleep 1; ) | telnet www.google.com 80
 -> /usr/bin/printf 'GET / \n' | nc www.google.com 80
youtube-dl -q -o- _gp51lt9kdA|mplayer -wid $(xwininfo -int -name "Desktop"|grep "Desktop"|awk '{print $4}') -cache 5000 - # Video background
 -> https://www.youtube.com/watch?v=_gp51lt9kdA
*/3 * * * * if [[ -z $(pgrep offlineimap) ]]; then offlineimap -u quiet; fi # run cronjob only if it is not already running

==September 2016==
sed -i -e '/^\s*#/!s/$val\>/$pid/g' getproc.pl # Replace all variables $val with $pid in getproc.pl, except on commented lines
find . -atime -$(date +%j) -type f # Find files you haven't accessed so far this year in a directory. Requires atime attributes.
egrep -oi '#[a-f0-9]{6}' file.css | sort | uniq # extract all unique hex color codes from a CSS fil
for i in {1..20} ; do rig|head -1 |tr A-Z a-z;done |while read f l;do echo ${f:0:1}${l}:$(pwgen 12 1);done # Gen 20 random users/passwords
egrep -o "from=<[^>]+\.[a-z0-9-]{2,}>" /var/log/maillog |awk -F\. '{print $NF}' |sort |uniq -c |sort -rn |head -20 # .Top 20 email From TLDs

function json_escape(){
  echo -n "$1" | python -c 'import json,sys; print json.dumps(sys.stdin.read())'
}
$ json_escape "ヤホー"
"\u30e4\u30db\u30fc"

echo "{'payload': {'message': '$(git log -n 1 --format=oneline | grep -o ' .\+')'}}" >  git-tmp.txt
curl -i -X POST \
  -H 'Accept: application/text' \
  -H 'Content-type: application/json' \
  -d @git-tmp.txt \
  'https://example.com'

==October 2016==
echo $(hostname) `cat /proc/loadavg | cut -f1 -d" "` `getconf _NPROCESSORS_ONLN`
 -> https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-nats-on-ubuntu-16-04
df -hP | awk 'NR==1;NR>1{print|"sort -k5rn"}' # Sort the output of df while keeping the header at the top
awk 'length > max { max=length;maxline=$0 } END { print maxline; }' quotes.txt # Print the longest line in quotes.txt
awk '!a[$0]++' file # Print lines of file without printing ones already seen. $0 means whole line in awk. 'a' is an array.
sort gkwzFruP.txt | awk '{if(l1==$1 && l3!=$3){print ll "\n" $0}; ll=$0;l1=$1;l3=$3}' # Print dupes where the 3rd column changed
awk -F':' '!max{max=$2;}{r="";i=s=.025*$2/max;while(i-->0)r=r"-";printf "%40s | %4d | %s %s",$1,$2,r,"\n";}' # Histo gen
awk '{s+=$3} END {print s}' data.txt # Sum numbers in the third column of data.txt
awk '($3 == "64.39.106.131") || ($1 ~ /^#/)' conn.log # Search 3rd field of conn.log for an IP and print the header line
zcat large.log.gz |awk '{print $0 | "gzip -v9c > large.log-"$1"_"$2".gz"}' # Breakup compressed log by syslog date and recompress
tcpdump -nn ip | awk '{s=$3;sub(/\.[0-9]+$/,"",s);if(a[s]++<10){print}}' # Show only up to the first 10 packets by each source IP
tail -f udp.log|gawk '{printf("%s %s\n",strftime("%Y-%m-%d_%T", $1),$0)}' # Prefix the epoch time in column 1 with the local time
strings /usr/lib/sudo/sudoers.so |grep Dave -B0 -A50 # Display sudo's insults
mping(){ ping $@|awk -F[=\ ] '/time=/{t=$(NF-1);f=2000-14*log(t^18);c="play -q -n synth 1 pl "f"&";print $0;system(c)}';} # mping nic.uz
rec -n stat trim |& awk '/Max.*amp/{if ($NF < 0.99){exit 1}}' && xscreensaver-command -lock # Fire alarm will now lock your screen
mendex
yes $COLUMNS $LINES|awk 'BEGIN{x=y=e=f=1}{if(x==$1||!x){e*=-1};if(y==$2||!y){f*=-1};x+=e;y+=f;printf "\033[%s;%sH",y,x;system("sleep .02")}'
awk -F, '/USC00120784/{print substr($6,0,4)}' weather.csv |uniq -c |awk '$2%4==0&&$1<366||$2%4!=0&&$1<365' # Find incomplete years in data.

==November 2016==
ps auxww | grep -o "/[^\ ]*" Show some full file paths referenced in the process table to try to find out where systems are storing data
diff -y <(cal -y 2016) <(cal -y 2017) # Two year cal display using diff side-by-side mode (-y)
 -> paste <(cal -y 2016) <(cal -y 2017) | expand -t70
vim macro: qajjddq # Record a macro called 'a' that moves down two lines (jj) and then deletes 1 line (dd). Run w/ @a, run 100 times 100@a
:set bg=dark or :set bg=light # In vim, depending on your term color scheme, these can help you w/ syntax highlighting
diff <(docx2txt < agreement.docx) <(docx2txt < newagreement.docx) # Did they really only change what they say they did?
curl -sI bit\.ly/gevpxbegerng |awk -F/ '/^Location:/{print $NF}' |(base64 -di||base64 -Di) # Decode message embedded in redirect
awk '{if(NF==8){print $2}else if(NF==9){print $2 " " $3}}' names.txt # Try to handle the case where a space is in 2nd column data
printf "%s\n" {A..Z} | nl | grep "[XKCD]" | awk '{sum+=$1} END {print sum}' # The hidden meaning of xkcd (aka "42")
curl -L bit\.ly/moonbox |convert - -fill none -stroke red -strokewidth 2 -draw "rectangle 76,97,1360,352" - |display - # Help compare sizes
for d in {1..254};do ping -c3 10.3.0.5 > /dev/null ||{ echo "VPN is down";break; }; nmap -T1 10.3.0.$d ; done # Check net before slow scan
vim> [Ctrl+K] a:
 -> :digraphs
traceroute 8.8.8.8|awk -F[\(\)] '$2~/[0-9]/{print $2}'|while read i;do echo $i;geoiplookup $i;done # Who can see your 8.8.8.8 requests?

==December 2016==
identify -format %k http://i.imgur.com/M4zoxE7.jpg  # Count unique colors in an image
rsync -aqzH (public mirror that supports rsync).???::CentOS /path/to/locate/mirror # Build a private mirror of the public mirror.
find . -maxdepth 1 -iname '*.mp3' -exec eyeD3 -G podcast \{} \; # tag all mp3 in PWD as genre podcast
nnoremap / /\v # Add this to .vimrc and all searches in vim will use "very magic" mode which acts like egrep
sleep 5;while IFS=, read {a..z};do for col in a c d;do xdotool type ${!col} $'\t';sleep 0.3;done;done # Type 3 CSV cols to Google docs table
base64 -d<<<TVRoZAAAAAYAAQABAYBNVHJrAAAAOgD/UQOAAAAAkEV/CIBFfwCQRX8IgEV/AJBKfwiASn8AkEx/CIBMfwqQSX8IgEl/AJBKfwiASn//LwA=|timidity - # Log!
identify -format "%f F:%[EXIF:Flash]\n" *.jpg | egrep " F:(0|16|24|32)$" # Show photo filenames where no flash was used. Req. Imagemagick
strace -p 927 -o smtpd -ff -tt # strace is a sysadmin godsend. This will follow pid 927 and its children, writing to smtpd.<pid>
[Ctrl-R] % # While in #vim insert mode, insert the filename of the current file into the buffer or vim command prompt
:noh # This vim command will turn off the current search highlighting until the next search. Use :set hlsearch to turn on
printf "%x\n" {1..65535} | while read -r u ; do printf "\033[38;5;$((16+$((16#$u))%230))m\u$u\033[0m"; done # Make a Unicode rainbow
for((I=0;J=--I;))do clear;for((D=LINES;S=++J**3%COLUMNS,--D;))do printf %*s.\\n $S;done;sleep 1;done
rec -t wav - | ssh user@remotehost play -t wav - # Play local microphone on remote machine's speakers. Fun for pranks. Uses sox package
socat -v UDP-LISTEN:8161,fork TCP:localhost:8161 # Encapsulate UDP packets in a TCP stream so it can be tunneled through an SSH tunnel, etc
yes $COLUMNS $LINES|pv -qL50|perl -ne'$|=1;($c,$r)=split;$s||=$"x($c*$r);print$s;$s=$"x$c.$s;substr$s,rand$c,1,"*";$s=substr$s,0,$c*$r+$c;'
nmap --open -p T:22 192.168.1.0/24 # Scan your internal network for hosts listening on TCP port 22 (SSH protocol)
function box() { t="$1xxxx";c=${2:-=}; echo ${t//?/$c}; echo "$c $1 $c"; echo ${t//?/$c}; } # Make box around text
awk '{a[$1] += $10} END {for (h in a) print h " " a[h]}' access_log | sort -k 2 -nr | head -10 # Display top bandwidth hogs on website
convert -size 500x300 xc:white -fill xc:'#CABB1E' -draw "polygon 35,140 115,130 150,55 310,55 350,130 460,150 460,210 35,210" cabbie.png
display -size 300x400 -negate xc:'#C0FFEE' # The inverted color of #C0FFEE looks like coffee

==January 2017==
libreoffice --headless --invisible --convert-to pdf *.ppt
yes "$(seq 16 231)" | while read i; do printf "\x1b[48;5;${i}m\n"; sleep .02; done # A color show in your shell.
pv bigdump.sql.gz | gunzip | mysql # restore a #mysql dump with progressbar and ETA
find /var/log -readable -ls # Find files under /var/log that are readable by the current user. Takes groups and ACLs into account
mogrify -resize 1080x1350 -gravity center -extent 1080 *.jpg # Fix image aspect ratios for Instagram
while true;do iwlist wlan0 scan |awk -F\" '/ESSID/{print $2}' |espeak;done # Your laptop says ESSID names while you drive around
find / \( -path /proc -o -path /sys \) -prune -o -print # Search the file system, but don't descend into the /sys or /proc directories
N=$((1894 * 238291));for i in {0..8};do echo -e "\e[3${N:${i}:1}m$(echo REBBZ ERYLG LENZ|tr A-Z N-ZA-M|rev)\e[0m";done #That 70s shell
acronym(){ elinks -no-numbering -dump "http://acronymfinder.com/ ${1:-RTFM}.html"|sed -n '/Rank Abbr/,/^$/p'; } # Ex "acronym FBI"
convert -size 2420x1580 plasma:fractal -blur 2x2 -swirl 270 -crop 1920x1080+250+250 swirlbg.png # Swirly plasma background. Uses ImageMagick
printf "2017-01-14 + %d weeks\n" {1..50} |date -f- +"%B %_d" # Print the dates for all the following Saturdays in 2017 for use in a document

==February 2017==
curl dict://dict.org/d:bash:foldoc
BC_LINE_LENGTH=0 bc <<<"2^4096" # Perform arbitrarily large math, while disabling bc's \ + newline output "feature"
date -d "$(stat -c %y /etc/passwd)" +%s.%N # Show the full last modified epoch time including nanoseconds of /etc/passwd (GNU version)
dd if=/dev/mem bs=1k skip=768 count=256 2>/dev/null | strings -n 8 # Read the BIOS on PC hardware
tr -cd , < file.txt | wc -m # Count the number of commas (,) in a text file.
printf "This is @climagic's %dth tweet. Thank you to my %d followers.\n\e[32m===,=='===\e[31m@\e[0m\n" $((10**4)) $((2**17))
mv image-file-with-query-string.jpg{?query-string=Z29vZCBqb2IK,} # Getting rid of query string in filename by surrounding it with {,}
sudo strings /dev/sdc | grep -C200 "Received: " # Look for email data on a hard drive, even if it was "deleted". Encrypt your FS!
elinks -dump bit\.ly/qutWZK|tr -d ,|sed -e '/^2015/q'|awk '/^[12]/{p=$6/$2*100; printf "%d %0.4f%%\n",$1,p}' # % US pop. murdered 1960-2015
convert bluethumb.png -modulate 100,100,50 greenthumb.png # Change the hue of an image by -90 degrees. 50 = ( -90 * 100/180 ) + 100
sed -E ':a /.{80}/!{s/^/ /;ba}' file
printf "%d\n" "')" # Print the decimal encoded value of a ). The ' before the character tells printf to interpret the character this way.
rtcwake -m mem -s 3600; ffplay alarm.mp3 # Put laptop to sleep for an hour, then play alarm
cd /etc;n=CAGBFDEC;stat -c%a *|while read -n1 k;do x=${n:$k:1};sleep .2;play -qn synth tri ${x}4 fade 0 .1937&done # Happy 80th Philip Glass
mplayer -fs -noborder -fixed-vo *.mp4 # Full screen seamless play your mp4 videos without borders. No window switching.
x=0;y=0;while [[ $y -lt 500 ]] ; do xdotool mousemove --polar $x $y ; x=$(($x+4));y=$(($y+1)); sleep 0.01; done # Move mouse in spiral.
date -d"2009-12-15 +2600 days"||date -v2009y -v12m -v15d -v+2600d; play -n synth sin 2600 trim 0 1 vol .05 # Today is day #2600 of climagic.
inotifywait -e open juicy.dat && w | awk '$5~/\.00s/' | mailx -s "Someone accessed juicy.dat" you@example.com # Catch a snooper.
N=$((1894 * 238291));for i in {0..8};do echo -e "\e[3${N:${i}:1}m$(echo REBBZ ERYLG LENZ|tr A-Z N-ZA-M|rev)\e[0m";done #That 70s shell
last -da | awk '{print $1 " " $NF}' | sort | uniq -c # Analyze your whole lastlog to see the different remote hosts for each user.
https://cmdchallenge.com/

==March 2017==
for x in {8,9,{A..F}}{{0..9},{A..F}} ; do printf "$x %c\n" $( xxd -r <<<"0 $x" ) ; done # Print the extended ASCII table
strace -s8192 -o evincetrace -ff evince file.pdf # Do an strace of evince and write all syscalls to logfiles even if it forks.
awk '$1==$2' columns.txt # Print lines from columns.txt where the first column is the same as the second column.
printf "%s\n" 10.0.{1..4}.{1..254} > network-ips.txt # Fill a file with a range of IPs from 10.0.1.1 - 10.0.4.254, one IP per line.
grep 10.50.60.70 logs.txt | cut -f1 | sed 's/^/@/' | date -f - # For lines with a specific IP in them, convert the epoch times to dates
date -d "$(stat -c %y /etc/passwd)" +%s.%N # Show the full last modified epoch time including nanoseconds of /etc/passwd (GNU version)
rot13 <<<"hello"
at 12:17pm <<<"echo testing >/tmp/foobar"
echo "foobar" | openssl dgst -sha256 -hmac "123456" -binary | base64
sed -E 's/\.(^M?)/\1/' testfile # Ctrl+V Ctrl+M

==April 2017==
convert -size 150x100 xc:white -fill red -draw 'circle 75,50 75,75' flagofjapan.png # Make the flag of Japan with ImageMagick.
ping -c100 4.2.2.2 | sponge | pee head tail # The pee command can run head and tail on same input. sponge waits for all the data first.
locate --regex '\.c$' | shuf | head -1 | xargs pv -q -L 20 # Poor man's hacker typer in the terminal.
last -da|cut -c27-30|uniq|awk -v y=$(date +%Y) '{if(/Jan/){print $0;print "-- " y--}else{print}}' # Jeez, how far back do these lastlogs go?
du -h -d 2 ~ | awk '$1 ~ /G/' # show folders 2 levels deep over 1GB in the current user's home folder.
cp -av /olddisk /newdisk # Copy files (cp) and preserve their timestamps and permissions (-a) while showing what is happening (-v).
socat TCP-LISTEN:8080,reuseaddr,fork 'EXEC:docker exec -i container "socat STDIO TCP-CONNECT:localhost:8080"'
convert 1.jpg <( curl http://wttr.in/Oymyakon_tqp0.png ) -geometry +50+50 -composite 2.jpg 
http://www.climagic.org/coolstuff/tron-etch-a-sketch.html
nc -k -l 4444 # Starts a WebSocket server and prints all requests to stdout
rpm -qa --queryformat "%-47{NAME} %{PACKAGER}\n" # Generate list of installed RPM names(left align) and their packager in formated columns.

==May 2017==
zforce - force a '.gz' extension on all gzip files
getconf -a | sort -k2nr | grep MAX # Know your limits
sed -n '/password/{x;p};h' config # Print the line before a line containing 'password' in the file 'config'
mplayer recent.mp4 -loop 0 -speed 8 # Play a video file recent.mp4 at 8x speed, looping it seamlessly forever
tcpdump -nn -v -i eth0 -s 1500 -c 1 'ether[20:2] == 0x2000' # Dump information from a CDP frame received on eth0
tac -s "^[[H" # You can reverse a set of "records" using tac with the -s option and a record separator. Used to make globe spin backwards
o=$(curl -Ls bit\.ly/globe_vt);yes "$o"|perl -ne '$/="\e[H";$\=$/;print "$_";select(undef,undef,undef,1/24);' # One world, no pv version
oneworld=$( curl -Ls http://bit\.ly/globe_vt );while sleep .1;do pv -L4220 -q <<<"$oneworld";done # ASCII globe animation
awk '$3~/^172\.16\./ && $5!~/^172\.16\./{printf("%s %s\n",strftime("%Y-%m-%d_%T", $1),$0)}' conn.log # List traffic from inside to outside
perl -Mcharnames=:full -CS -wle 'print "\N{EURO SIGN}"'
topuniq(){ sort|uniq -c|sort "${@:--rn}"; }
animate http://climagic\.org/images/rice-spinner.gif # ImageMagick's command 'animate' allows you to view animated gifs direct from the URL.
convert spin.gif -coalesce -gravity NorthEast -draw 'image over 0,0 0,0 "credit.png"' -layers Optimize spin2.gif # Add image to anim gif.
ffmpeg -f aac -analyzeduration 100M -probesize 100M -i broken.m4a -c copy fixed.m4a # fix a broken M4A file with a corrupted header
{ find /one; find /two; } | tar zcvf one-and-two.tar.gz -T - # You can use a bracketed command to pipe two find outputs into one tar.
7z l philip-glass-linux-0.8-minimal.iso # 7zip can also list the contents of iso images and extract them too. No need to mount the image
play -n -c1 synth whitenoise lowpass -1 120 lowpass -1 120 lowpass -1 120 gain +14 # Star Trek
stat -c '%a %n' * # display numerical values for file permissions
lspci | grep -q -e MEI -e HECI && echo "Check your firmware for Intel AMT vulnerability" # Check physical host for vuln. CVE-2017-5689
https://bellard.org/jslinux/ # x86 JavaScript

telnet magic-1.org 51515 # user: guest; passwd: magic # https://www.youtube.com/watch?v=0jRgpTp8pR8

telnet mapscii\.me # world map on CLI
for i in 1F6{0..4}{{0..9},{A..F}}; do printf "\\\\U$i\U$i\n"; done # print unicode emoticons

==June 2017==
curl cheat.sh/python
curl http://qrenco.de/Very_long_text
printf "two\nlines" | curl -F-=\<- qrenco.de
 -> How to convert text into a QR-code in Vim: select the text (shift v + arrows) and :!curl -F-=\<- qrenco.de after that
If you have Coreutils 8.24+ you can do 'dd if=src of=dest status=progress' too
curl -s https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/10_million_password_list_top_1000.txt | nl | grep vegeta
join -a2 -j2 <(cat -n old|sort -k2) <(cat -n new|sort -k2)|awk 'NF==3{print$3,-$3+$2,$1;next}{print$2,"-",$1}'|sort -n # show rank change
awk '($1 % 86400 < 43200 || $1 % 86400 > 75600) {print}’ log # Print lines in log where epoch time (col 1) is before 8am or after 5pm EDT
dict $( look . | shuf | head -1 ) # WOTD

http://www.infoworld.com/article/3200766/application-development/9-shell-tips-every-developer-should-know.html
https://www.movavi.com/

==July 2017==
youtube-dl --write-auto-sub -f 139 -o subtitles CUdwDEKlDrw; grep '<c.color' subtitles.en.vtt|sed 's/<[^>]\+>//g' # Get YT autogen subtitles
jar tvf path/to/some.jar | awk '{print $NF}' # Print a list of all the classes defined in a Java JAR
df -hP | column -t # If your Linux device names are long enough that it wraps lines, try using -hP and pipe to column for nicer output.
dd if=/dev/random of=dont-run-this.bin bs=128 count=$RANDOM ; chmod a+x dont-run-this.bin #Randomware
head -1 data.csv | tr , $'\n' | nl # Print the number and column name to help write awk expressions
rlwrap nc smtp.example 25 # Use rlwrap to add readline functionality to nc (or other cmds)
cnee --record --mouse --keyboard -o http://record.data  -sk q
cnee --replay -f http://record.data  -v -e /dev/null -ns
killall -STOP render # Pause execution of any process called render. As if you pressed Ctrl-Z in shell. Resume with 'killall -CONT render'
geoiplookup 73.250.181.107 # Find out what country/state/city an IP is probably "located" in. No browser required (geoip-bin dpkg)
tr '\000' '\377' < /dev/zero # How to "make" /dev/one (377 in octal is 0xFF hex or all 8 bits on
history | awk '{print $2}' | sort | uniq -c | sort -rn | head # list your most used commands

==September 2017==
dmesg -T | tail -n20
exiftool -all= photo.jpg # Remove all the exif metadata tags from photo.jpg to improve privacy before uploading
stellarium --sky-date 20170821 --sky-time 14:27:00 --longitude 87.342581W --latitude 36.782564N # If you can't make it to watch totality.
links -dump https://www.example.com/contact  | awk -F: '/Math question:/{print $2}' | bc # Solve the basic arithmetic CAPTCHA 
echo "ping" >/dev/udp/$host/$port # quickly knock a UDP port
awk '$3~/^src:10\./{print $3};$4~/^dest:10\./{print $4}' network.log |sort |uniq # Get a list of 10/8 internal IPs showing up in col 3 or 4
zcat month.log.gz | awk '{print $0 | "gzip -v9c > brokenup.log-"$1"_"$2".gz"}' # Breakup large log by syslog month/day and recompress.
comm -23 <(sort speaker.emails |tr A-Z a-z |uniq) <(sort attendee.emails |tr A-Z a-z |uniq) # What speakers are not on the attendees list.
tr $'\n' \; < email-list # Format a list of emails so that when you paste them into Outlook (ugh!), it breaks them up into individual addrs
stat -c %y *.jpg | cut -c1-10 | uniq -c # Produce stats on how many images you took on each day, regardless of strange filenaming schemes.
df -lk | awk '/^\//{ SUM += $3 } END { print SUM/2**20 " GiB" }' # Print out the total local disk space you are using
:(){ true; };readonly -f : # You can put this in your shell rc to *help* protect yourself *specifically* from :(){ :|:& };: #bash
while date +%s | figlet ; do sleep 1 ; clear ; done # Watch the Unix clock in style as it approaches 1.5 billion seconds.
gunzip -c /var/log/apt/history.log.*.gz | grep 'apt-get install' | cut -f4- -d" " | tr ' ' $'\n' | sort -u # installed packages
udisksctl mount -b /dev/sdc1 # Using your group privilege, mount (removable drive) /dev/sdc1 as if it automounted with its name.

==October 2017==
whois slashdot.org | awk '/Creation Date/{print $NF}' # Get the creation date of a domain
awk 'a[$1 $2]++ < 5' /var/log/syslog # Print the first 5 log lines from each day in syslog
awk 'length > max { max=length;maxline=$0 } END { print maxline; }' quotes.txt # Print the longest line in quotes.txt
curl -d '' http://roku\.home:8060/keypress/Up # Move up in your Roku interface. Great for when you can't find the remote.
for i in log.{48..1}.gz ; do printf "$i\t" ; zgrep problem $i | wc -l ; done # Generate line stats of a problem over time in old logs
[C-x] * # Alt. way you can exclude items from a glob match is to expand the glob with Ctrl-x * and then just remove the items you don't want
du -sh [a-m]*/ --exclude=export/ # Measure the disk space used by directories starting with a-m, skip exports dir
 -> du -sh -I export [a-m]* # Measure the disk space used by directories AND FILES starting with a-m, skip export dir
echo %42%65%20%63%61%72%65%66%75%6c%20%77%68%61%74%2f%68%6f%77%20%79%6f%75%20%64%65%63%6f%64%65%0a | xxd -p -r # Decode a hex encoded string
look . | egrep "^s.*m.*b" | egrep "^.{4,9}$" # Show a list of the other candidates for an open source SMB service
ls 2017-0[5-9]-??.wav |cut -c 1-11 |date -f- +%A |sort|uniq -c|sort -nr # Stats for most common DOW for these wav files between May and Sept
echo $((2#1101)) # calculate binary 1101 => decimal
printf '%x\n' $((2#1101)) # calculate binary 1101 => hexadecimal
xargs < file.txt # This is an easy way to join a file into one line if you're in a hurry. Be careful with large data though, might truncate.
diff -rq dir1 dir2 # compare folder contents and show the difference
[Ctrl-b] s # Have more than one tmux sessions running? Start tmux first and this keystroke lets you choose other tmux sessions easily
less log log.2 log.3 | grep " 404 " | more # Did you know that if your output from 'less' is a pipe, it behaves like cat
dpkg -l '*4.10.0*' | cat # Sometimes in cases where columns are truncated, you can make them visible by passing output through cat
perl -e 'use bytes; for($t=0;;$t++){ print chr($t*(($t>>13|$t>>8)&30&$t>>4)); }' | play -t raw -b8 -r8k -e un - vol 0.5 # Infinite "music"
while :;do rig |head -1 |tr '\n' ,;echo $RANDOM{,,,,} |tr -d ' ' ;done |sed -r -e 's/,(...)(..)(....).*/,\1-\2-\3/' # "Infinite" data breach
grep -ao "[/\\]" /dev/urandom|tr -d \\n # 39 character infinite ASCII maze generator.
play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +30 fade h 1 86400 1 # Pretend you are on a starship (Uses sox)
alias ohmyawk='awk -i ~/.awk/myfunctions' # Create an alias for awk that includes your own custom awk functions.
stellarium --sky-date 20170821 --sky-time 14:27:00 --longitude 87.342581W --latitude 36.782564N # If you can't make it to watch totality.

==December 2017==
sshfs user@remotehost:/remotedir localdir # sshfs is a util that uses FUSE and SSH to mount a remote directory as a local one. #TwoAteZero Available in most repos:
 Deb: apt-get install sshfs
 Mac OSX: brew install sshfs
 Red Hat: yum install fuse-sshfs
 Yes Arch too: pacman -S sshfs
sort -t, -k5nr data.csv | less # Sort data.csv by the 5th column's numeric values in descending order.
t stream search -l love |pv -l >/dev/null # Count how many times per second the word love is used on Twitter in real time
bvi # binary vi

==May 2018==
X="oooooooooo";{ printf 'static char *tmp[] = {"10 10 4 1","o c #111","R c #F00","B c #00F","Y c #FF0",';printf '"%s",' $X $X $X $X ooYYoooooo oooYYooooo $X $X RRooooBooo RRoooBBBoo; echo '};' ; } | convert xpm:- -scale 200x tetris.gif # Tetris "game" in <280
sed -n '1,2p;8,23p' LICENSE|tr $'\t' ' '|convert -size 500x400 -background transparent -mattecolor transparent -fill orange -font Helvetica-Bold -pointsize 13 -gravity center -distort Perspective '0,0 100,200 500,0 400,200 0,300 -500,800 500,300 1000,800' caption:@- GPLtext.png
showcolor(){ display -size 400x400 "xc:$1" ; }; showcolor '#6495ED' # Check what a color code will look like by making a function to display them.
convert inputmemeimage.png -font impact -fill white -pointsize 48 -stroke black -strokewidth 2 -gravity north -annotate 0 'TOP TEXT' -gravity south -annotate 0 'BOTTOM TEXT' outputmemeimage.png # Make your own meme image using Imagemagick.
awk '{print length($0) " " $0}' tweets.txt # Print the length of each line of a file in front of the line itself.
convert -size 1280x720 xc: +noise Random -channel R -threshold 0.5% -negate -channel RG -separate +channel -compose multiply -composite stars.png # Use Imagemagick to generate a decent star field.
fc # This will edit the previously run command in $EDITOR. So it's a good idea to set EDITOR to your favorite one. Executes on editor exit.
PROMPT_COMMAND='[ $? -ne 0 ] && play -qn synth sin G3 trim 0 0.1' # Play a sound if you get an unsuccessful return code from last command.
printf "%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d\n" $( echo {1..10}*{1..10}\; | bc ) # Create a multiplication table.
convert receipt.jpg -crop 1000x2000+1500+0 -fuzz 25% -trim fd:1 | display -resize 50% - # Use ImageMagick convert and display to crop an image and see immediately the effect. fd:1 means write to stdout and the - for display captures stdin. fuzz and trim remove excess border.
awk '$7~/\?.+/{key=$1 " " substr($7,index($7, "?")); a[key]++} END{ for (k in a) print k}' access_log |cut -d' ' -f 1 |sort |uniq -c |sort -nr |head -20 # Show top hosts using widest variety of URL query strings. Maybe indicating attackers or even vulnerable software.
for d in {1..2001}; do date -d "now - $d days" +"%Y/%-m/%-d" ; done # Generate last 2001 days of dates and don't zero pad mon/day by using %-m and %-d in the format.
grepcidr - Filter IP addresses matching IPv4 CIDR/network specification (e.g., grepcidr 10.71.0.0/18 rand_ips.txt)
pee - tee standard input to pipes
 -> grep -i -e foo -e bar -e bam text.txt | pee cat wc # Case insensitive (-i) search for 3 different terms (multiple -e) in text.txt and print the results and also send the results through wc to see the final line count.
poly(){ c=`bc -l <<<"for(;i++<$1;){t=6.28*i/$1;print s(t)*$2+$2,\",\";c(t)*$2+$2}"`;convert -size $[$2*2]x$[$2*2] xc: -draw "polygon $c" png:-|display; } # Function to draw a regular polygon using ImageMagick commands.
 -> Ex: poly 8 280
awk '$9~/^5/' access_log | less -S +/" 5.. " # Check your access_log for requests that had 5XX level HTTP errors. less auto search highlight
awk '$9=="404"{a[$1 " " $7]++} END{for (k in a) print k;}' access_log |cut -d' ' -f1 |sort |uniq -c |sort -rn |head -20 # Shows top hosts making the widest ranging scans of resources you don't have on your website.
find . -vulnerability crit -name '*.php' # Find all the PHP files with critical vulnerabilities in them.
echo "import this" | python # Python language "easter egg".
python3 -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)' < broken.yaml > fixed.json
curl http://parrot.live
grep -C3 searchpattern file # Search for searchpattern in file and provide 3 lines above and 3 lines below of context in the output.
grep -f patterns.txt < file # Along those same privacy lines, you can prevent the files you are searching through and your patterns from being seen in the process table by redirecting from stdin and using grep's -f option.
$EDITOR # On hosts with access by others, you may wish to keep the file you are working on out of the process table for privacy or even security reasons. In which case you can start the editor first and then open the file from within.
file -P bytes=10 * # Limit bytes read per file to speed up the 'file' command by reducing extra info. This isn't available in all versions.
for f in *.csv ; do tail -n +2 $f > headerRemoved/$f ; done # Make a copy of all csv files in CWD with first line (header) omitted.
ssh pi@raspberrypi.home 'arecord -f cd -D plughw:1 | ffmpeg -ac 1 -i - -f ogg -' | mplayer - -idle -demuxer ogg # Baby monitor over ssh, making it more private/secure than those in stores. Replace plughw:1 with mic device from arecord -l output. Make it a script for easy access.
curl -s https://data.iana.org/TLD/tlds-alpha-by-domain.txt | egrep "^[^#]{3,}" | wc -l # Count the number of 3+ letter TLDs
for p in 20180302_{00..23}{00..55..5}.jpg;do [ -e $p ] || echo $p;done # Check if you're missing a file in time sequence of 5 min increments
echo {00..23}{00..55..5} # Print every 5th minute of the day. Since version 4, Bash has an increment feature on brace expansion ranges.
identify -format "%k:%f\n" 20180302_*.jpg | awk -F: '$1 < 50000{print $2}' | xargs -I{} mv -v {} darks/ # Move low-color-count pictures from raspberry pi plant camera to darks directory. Making timelapse video. Requires some testing first to find threshold. Uses ImageMagick
date -d @$((2**31-1)) # You heard it here first. Less than 20 years to go before 32-bit epochtime runs out.
stty -echo; grep -F -f- passwords.txt; stty echo # Use the -f option with - to read search patterns from stdin. Press [Ctrl-d] twice when done. I used -F here for fixed string to avoid things like . matching all. I do all this to avoid passwords in the process table or history.

rainymood() {
  FILE=$((RANDOM%4))
  URL="https://rainymood.com/audio1110/${FILE}.ogg"
  mpv "$URL" && rainymood
}

feh -F -D90 --recursive --randomize --auto-zoom ~/Pictures # Create a random image slideshow w/ 90 sec delay for #RaspberryPi + old monitor.
grep -E '\b4\.5\.6\.7\b' log # Escape special characters and provide context when searching for IPs to avoid matching other IPs/non IP data.
PS1="\t $PS1"  # Customized your shell prompt in BASH so that it is prefixed with the current time.
while :; do echo wub wub wub | espeak --stdout | play - pitch -400 bend .3,-600,.3 ; done # CLI generated dubstep
curl rate.sx/eth
TOKEN=$(dd if=/dev/urandom bs=128 count=1 2>/dev/null | base64 | tr -d "=+/" | dd bs=32 count=1 2>/dev/null)

==September 2018==
tar ztvf large.tar.gz | awk '{s+=$3}END{print s}' # Use awk to sum up the sizes of the files inside a compressed archive file. Unfortunately you can't use gzip -l on files where the uncompressed data is greater than 4GB.
mkdir PNG && find . -maxdepth 1 -name '*.svg' | while IFS=$'\n' read f ; do inkscape "$f" --export-png="PNG/${f%%.svg}.png"; done # SVG 2 PNG in CWD. Using Inkscape's command line functionality to convert SVG documents into PNG images.
elinks -no-numbering -dump-width 999 $(date +"http://enwp.org/%B_%d ")|sed '/Births/,/Deaths/!d'|grep \* | egrep -i --color=no "(math|computer|program|engineer|scien|invent)" # Show today's famous #STEM birthdays from the Wikipedia page for today's date.
comm -3 <(ls olddir) <(ls newdir) # Compare the contents of 2 directories by showing only 2 columns, one for the files unique to each directory.
rpm -qa --queryformat "%10{SIZE} %{NAME}\n" | grep -Ev "(kernel|glibc|perl$|python-libs$|coreutils|hwdata$|glib2|grub2$|yum$|binutils$)" | sort -rn | head -100 # Show the largest #rpm packages on the system, omitting *some* of the critical ones.
blue(){ tput setaf 4; echo $@; tput sgr0; } # Make text passed by argument to this function blue. ex: blue "I'm blue"
rpm -qa --last | head # Show the last 10 packages installed on an RPM based host.
script upgrade.log # script is a nice program that allows you to record your interactive shell session and records everthing that seen in your terminal. Just exit the shell when done. Great for logging upgrades, audits, and general CYA work. # OR `exit 1`
play -n synth -j 3 sin %3 sin %-2 sin %-5 sin %-9 sin %-14 sin %-21 fade h .01 2 1.5 delay 1.3 1 .76 .54 .27 remix - fade h 0 2.7 2.5 norm -1 # Chimes sound from the 'sox' man page.
du -shc *.png | tail -1 # Display the total size used by PNG image files in the current directory
dict us-zipcode | dict country-name
awk -F, '/^2/ && $10!="" { key1=substr($1,1,10) $2; key2=$10 "," $11 "," $12; a[key1][key2]=$0; if(length(a[key1]) > 1){ for (i in a[key1]) { print a[key1][i]  } }}' duolog.csv | sort | uniq # In Duo 2FA log, find users who logged in from two different geo locations on same day.
awk -F, '{print $2}' users.csv | while read -r u ; do useradd -m -d /home/$u -G users $u ; echo $u ; done # Take a list of usernames from a csv file (you should check the output of awk print $2 for sanity first) and create each one, also adding them to a 'users' group.
look . | grep -E "^[a-z]{2,}$" | sort > wordlist ; rev wordlist | sort > wordlistrev ; comm -12 wordlist wordlistrev # Find words that have a reverse which is also a word.
 -> look . | grep -E "^[a-z]{4,7}$" > wordlist ; rev wordlist > wordlistrev ; grep -x -f wordlistrev wordlist # Find words that make other words backwards. This can take a while. This example limits to words 4-7 letters long but you can change the regex for longer/shorter words.

sd ()
{
 cal -y | GREP_COLORS="mt=07;32" \grep --color=always -EC 4 " $1 |^$1 " | GREP_COLORS="sl=11;33:mt=07;33" \grep --color=always -B2 -A6 '[A-Z][a-z] '
}

https://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt
play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +30 fade h 1 86400 1 # Pretend you are on a starship 
apt-get install multitail

==October 2018==
eval play -n synth .25 pl\ {F2,F2,G2,F2,G#2,F2,Bb2,A2} delay $( seq 0 .25 1.75 ) repeat 100 remix - # Play the bass line from the theme to Peter Gunn using sox play. Also known from Blues Brothers, Spy Hunter, etc.
Want to know when you closed your laptop lid and open it in #ubuntu
Run `zgrep -P 'systemd-sleep\[\d+\]: (Suspending system|System resumed)' /var/log/syslog*` in command line
display $( find /usr/share/icons -name '*folder.png' | grep 64x64 ) # Just used this to browse through the different styles of folder icons at 64x64 res that were available in Linux for some clipart (with attribution of course ;). The 'display' command is from ImageMagick
dotshare.it/  # This site allows people to share their dot config files. For instance, they have a collection of people's .bashrc files for doing flashy or interesting things with their prompts, etc.
PROMPT_COMMAND='[ $? -eq 0 ] || printf "(╯°□°）╯︵ ┻━┻\n"' # You can set this in your bash shell config to flip a table whenever a command fails with a non-zero exit status.
inotifywait -e open art.jpg && s=$(stat -c %s art.jpg );h=$(($s/2));r=$((s-h)); dd if=/dev/urandom | grep -a -o -P "[\x01-\xD0]" | tr -d $'\n' | dd of=art.jpg bs=1 seek=$h count=$r # Digitally "shred" half a file after it is opened. #Banksy
strace -e open -p 4450 -p 5523 # What the hell are process ids 4450 and 5523 trying to open that's driving up the system load so much? This only filters out the open syscalls. For all of them, just leave the -e open part off.
date -d @1539217802 # Using GNU date you can convert a Unix epoch time back into a human readable date by prefixing it with @
awk '{n=$1-lc;if (n<-1||n>1) { print; lc=$1; }}' temp.log # Show temperature log lines when the temperature value changes more than one degree in either direction.
for i in {1..50} ; do d=$(( RANDOM % 29950 + 6575 )) ; date -d "$d days ago" +"%F"; done # Create 50 random dates that are between 18 - 100 years ago. Used to create example birth date data.

==November 2018==
# Calculate primes: current=0; max=110; echo 1; echo 2; for((i=3;i<=max;)); do for((j=i-1;j>=2;)); do if [  `expr $i % $j` -ne 0 ] ; then current=1; else current=0; break; fi; j=`expr $j - 1`; done; if [ $current -eq 1 ] ; then echo $i; fi; i=`expr $i + 1`; done

==January 2019==
openssl rand -hex 6  # generate a random password (12 characters)
echo "h"{,,,,}
ssh -R 5000:localhost:5000 user@host-with-https # Did this from a raspberry pi at home that I wanted to control from Alexa, which requires recognized SSL cert. So Alexa connects to my website, then mod_rewrite redirects to the SSH reverse tunnel and connects to program on Pi.
ls ????????????????????* # Shell globbing doesn't have a quantifier expression such as {20}, but you can just use enough '?'s to indicate the quantity of characters you need to match. In this case, match files 20 characters or longer.
date -d "+ 20 years"|| date -v +20y # Tomorrow at 01:37:04 UTC is the halfway point between Y2K and the Unix signed 32-bit epoch rollover on Jan 19th, 2038. Think it doesn't matter? Consider that Raspbian OS for Raspberry Pi's is still 32-bit. 
touch -r 1218181022.jpg 1218181022-mirrored.jpg # Change the timestamp on a file so that it matches that of a reference file.

==February 2019==
curl http://ifconfig.co
curl -4 http://ifconfig.co
telnet towel.blinkenlights.nl
curl wttr.in

==March 2019==
dd if=/dev/urandom | gzip -9 >> /dev/null & # Create artificial CPU load on the VM (by forcing the CPU to continuously attempt to compress random data)
openssl md5 -binary myfile.txt | openssl enc -base64 # => MD5 hash
cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1
xxd -p -l 32 -c 32 /dev/random
 -> xxd -p -l 4 /dev/random
 -> python -c 'import os,base64; print base64.urlsafe_b64encode(os.urandom(16))'
https://backreference.org/2014/11/12/on-the-fly-ipsec-vpn-with-iproute2/

==April 2019==
inotifywait -e open art.jpg && s=$(stat -c %s art.jpg );h=$(($s/2));r=$((s-h)); dd if=/dev/urandom | grep -a -o -P "[\x01-\xD0]" | tr -d $'\n' | dd of=art.jpg bs=1 seek=$h count=$r # Digitally "shred" half a file after it is opened.
lspci -v -s 01:00.0 # GPU memory
curl rate.sx/btc
1/137 => fine structure constant

==July 2019==
curl -L https://goo.gl/S1Dc3R | bash -s 2 \
      "http://localhost:8081"

==August 2019==
head -c 16 /dev/urandom | od -An -t x | tr -d ' '  # generate a token/password
telnet mapscii.me # https://github.com/rastapasta/mapscii
npm i -g movie-cli
 -> movie Far and Away

==September 2019==
curl http://v2.wttr.in # weather
curl http://qrenco.de/Very_long_text # QR code
curl -H "Accept-Language: de" wttr.in/Berlin # weather
echo -e "\xC3\xAF" # -> ï (see: https://en.wikipedia.org/wiki/%C3%8F UTF-8 hex small)
echo -e "\u2638" # -> ☸

---
espeak -v eo --ipa -s120 -p60 -a20 "[['ita'fak'mi:lu:'ki:li:]]"
# i.e. speak with an Esperanto voice (-v eo), print the IPA on the console (--ipa), set the speed at 120 words per minute (-s120; range : 80-500, 260 recommended by the doc), set the pitch to 60 (-p60; range : 0-99), and the amplitude to 20 (-a20; range : 0-100).
---

gcal --holiday-list --astronomical-holidays | grep 'Full Moon' # https://adriansieber.com/cal-display-calendar-in-terminal/
curl wttr.in/:help # weather help
strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo # Generate a random password 30 characters long
wget -q -U Mozilla -O output.mp3 "http://translate.google.com/translate_tts?ie=UTF-8&tl=en&q=hello+world
curl -s "https://api.datamuse.com/words?rel_jja=gradual&max=4" | python -mjson.tool # https://www.datamuse.com/api/

==October 2019==
https://www.cyberciti.biz/open-source/command-line-hacks/pfetch-linux-and-unix-hardware-information-tool/

==November 2019==
aptitude search '?provides(wordlist)'
/usr/share/nmap/scripts/

==December 2019==
https://dev.to/victoria/a-cron-job-that-could-save-you-from-a-ransomware-attack-46m
echo "the quick brown fox jumps over the lazy dog" | tr -d ' ' | fold -w1 | sort | uniq | wc -l
 -> echo "the quick brown fox jumps over the lazy dog" | awk -F '' -v 'OFS=\n' '{gsub(" ","");$1=$1}1' | sort | uniq | wc -l
grep -Ev "^\W*#|^\W*$" config.yaml
alias hideprev='history -d $((HISTCMD-2)) && history -d $((HISTCMD-1))' # Hide the previous command you just ran and forgot to use a prefix space to ignore it.
kill -STOP 5149 # Stop the execution of pid 5149. Same as if you pressed Ctrl-Z shell. Resume execution with kill -CONT 5149
at "10:15am + 2 days" <<<"notify-send -i dialog-warning -u critical -t 3600000 'Remember to make that blog post'" # In X windows, make yourself a little reminder that will trigger in 2 days at 10:15am via an "at" job.
[ $(( $RANDOM % 2 )) -eq 0 ] && command # Run a command (~50% of the time). Useful in cron for unreliably running things, but remember to use \% instead of % if using in crontab.
df . # This is an easy way to find out what partition the current directory is on, regardless of symlinks.
vim https://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-demo.txt
awk -F: {'print $1 ":" $2'} messages |uniq -c # Count syslog hits per minute in your messages log file. Useful for doing quick stats.
rename 's/_(\d{4})(\d{2})(\d{2}).txt/_$1-$2-$3.txt/' *_????????.txt # Rename set of files with non-hyphened date at the end to have hyphens. Uses Larry Wall's version of rename.
watch -n0.1 "grep "[M]Hz" /proc/cpuinfo; free"
PROMPT_COMMAND="echo pipe statuses: \${PIPESTATUS[@]}" # In bash, this will show the return status of each command in the pipeline in the previous pipeline. So for instance 'ls | grep unmatchingexpression | wc -l' might return '0 1 0' showing that the grep didn't match.
nmap --open -p T:22 10.0.0.0/24 # Scan your internal home network for hosts listening on TCP port 22 (SSH protocol).
xclip -o |qrencode -o - |display -
awk '$9 == "404" {print $7}' access.log |sort|uniq -c|sort -rn| head -n 50 # List top 50 404 (not found) pages from requests to your website in descending order.
egrep -o "(Donnie|Frank|Roberta|Grandma)" story.txt |sort|uniq -c|sort -rn # Search for names and build a frequency count for each name.
git log --author=$USER --format="- %B" --since=-7days --reverse |mail -s "What I've done this week" boss@company\.com # Send a commit report to your boss
mplayer -ao null -aspect 32:9 foobar.mkv -loop 0 -wid $(xwininfo -int -name "Desktop" |grep "Desktop" |awk '{print $4}') # Play a video as a desktop background across two 16:9 monitors in X windows.
tail -F firewall.log |while read -r line;do printf "\033[38;5;%dm%s\033[0m\n" $(($RANDOM%255)) "$line";done # Random color per log line.
(head -5; echo; tail -5) < /var/log/syslog # show the first and last 5 lines of the syslog file, including a blank line between them.
youtube-dl --skip-download --write-thumbnail knGYTLTHV_E # Download just the thumbnail from a youtube video.
ind . -newermt "2015-12-31 23:59:59.999999" \! -newermt "2016-12-31 23:59:59.999999" # Get a list of all files last modified in 2016. Unfortunately, find's -newer syntax is non-inclusive so you have to account for that with precise pre-times.
curl -A CLI -sD- bit\.ly/gevpxbegerng |awk -F/ '/^Location:/{print $NF}' |(base64 -di||base64 -Di) # Decode the hidden message embedded in a redirect.
df -lP |awk '{sum += $3} END {printf "%d GiB\n", sum/2**20}' # Show the total space used on all your local disk partitions.
mplayer -vo png -ss 3:46 -frames 20 stairs.mp4 # Write out 20 png format frames from a video starting at 3 minutes, 46 seconds.
find . -empty -type d # List of empty subdirectories under current directory.
i=0;ls -1 *.jpg|head -60|shuf|xargs -n 6|while read a b c d e f;do n=null:;montage -adjoin -frame 0 -tile 3x4 -mode concatenate -geometry 1000x1000+0+0 $a $b $c $n $d $n $n $e $n $n $f $n uv$[i++].jpg;done
for i in {1..997};do printf "%0${i}d"|grep -P "^0?$|^(00+?)\1+$" >/dev/null ||echo $i;done # Primes using Perl regex. Explained at: http://bit.ly/O1LMMD (http://montreal.pm.org/tech/neil_kandalgaonkar.shtml)
printf "%3d %3d %3d %3d %3d %3d %3d %3d %3d %3d\n" $( echo {1..10}*{1..10}\; | bc ) # Print a multiplication table.
date --date "Oct 17 1976" +%A

==March 2020==
convert -size 413x314 radial-gradient:tan-black -font Chilanka-Regular -fill red -pointsize 150 -gravity south -draw "text 0,0 '3.14'" -flop -gravity north -draw "text 0,20 '3.14'" pi-pie.png # 3.14 backwards spells pie.
wget -w1 http://www.example\.com/{00..23}h{00,15,30,45}m.png # Download a series of timed images with 15 minute intervals from a site with 1 second delay between web requests to be a friendly netizen.
ionice -c 3 cp vm1.img vm1-backup.img # On Linux, copy a file using "ionice -c 3" to give it idle priority to reduce IO load on the system.
for i in {1..50};do echo "$i: $(($RANDOM%30))"; done |gnuplot -e "set terminal dumb $COLUMNS $LINES; plot '-' with lines" # You can use gnuplot to generate an ASCII art line graph in the terminal.
split -l 5000 largefile.csv --additional-suffix=.csv splitfile- # Split a file into 5000 line files called splitfile-xaa.csv, splitfile-xab.csv, etc.
display -size 300x300 xc:'#D288AC' # Display a square of the hex value color D288A
socat -v UDP-LISTEN:8161,fork TCP:localhost:8161 # Encapsulate UDP packets in a TCP stream so it can be tunneled through an SSH tunnel, etc
https://checkhost.unboundtest\.com/checkhost # Check if http://yourhostname.com is going to be affected by the Let's encrypt problem described here: https://letsencrypt.org/caaproblem/
grep -c '?' *.txt | sort -t: -k2rn # count the number of lines with a question per txt file and order them by count. Note that files with colons in their name will break this pattern.
awk '$2!=""' entries.txt # This will only print the line if there is a 2nd column (whitespace separated) on the line. Likewise, you could print the lines that don't have a 2nd column with awk '$2==""'
curl -s https://www.census\.gov/popclock/data/population.php/world | jq '.world.population' # Check today's world population.
python3 <<<'print(2-20**1991)' 
dict inconceivable
sed '9d' http://check.py | md5sum # Check if two scripts are identical except for line 9 without having to copy them to the same host.
d=$(date +%Y); convert -size 420x240 xc:white -font AvantGarde-Book -fill black -gravity east -pointsize 200 -annotate 0 ${d:0:2} -flop -annotate 0 ${d:2:4} -draw 'circle 69,69 79,69' -draw 'circle 350,69 360,69' -fill red -fuzz 50% -draw "color 210,100 floodfill" show:
aws secretsmanager get-secret-value --secret-id $SECRET | jq -r '.SecretString | fromjson | to_entries[] | "\(.key)=\(.value)" ' > .env

The hyphen is useful shortcut in the shell.
1. cd - # cd to previous directory cd -/cd - to swap back and forth.
2. git checkout - # checkout previous branch. Swap back and forth.
3. git merge - # merge current branch with previously checked out branch.

zgrep -h DPT=8728 /var/log/firewall.{9..1}.gz /var/log/firewall | cut -c1-10 | uniq -c # Look through the last 9 compressed firewall log files in chronological order (reverse numerical by logrotate) and the current one for hits to port 8728 and generate daily hit stats.
fc # 'fix command' opens the previous command in the $EDITOR. edit, save, quit, and the command will execute
mplayer -endpos 3 -fixed-vo 3dprinter-?0.mjpeg # Playback the first 3 seconds of every 10th 3dprinter video (according to how you have them numbered) and keep the window constant.
printf "now- %d days\n" {1..332044} | date -f- +"%Y%m%d %m%d%Y %d%m%Y" | perl -ne 'chomp;@d=split(/ /);$all3=1;for($i=0;$i<3;$i++){ if ($d[$i] ne reverse($d[$i])){$all3=0} }; if($all3 == 1) {print "$_\n";}' # Verify first alignment of ZERO PADDED palindates across three formats.
openssl s_client -connect http://office.com -servername http://office.com </dev/null 2>/dev/null |openssl x509 -noout --checkend 86400 # Check if the SSL certificate for a website is going to expire in less than a day.
python3 -m http.server 8080 # Start a simple webserver using python3 on external port 8080 and use the current directory you are in as the document root. Be careful with what you expose to the world. Use --bind 127.0.0.1 if you want to make it local only.
jp2a Photo.jpg | tee photo.ascii # Convert a photo into an ASCII art representation directly into the terminal and save it to photo.ascii at the same time.
xsel -b | sed 's/2019/2020/g' | xsel -b # Replace all instances of 2019 with 2020 in your X windows copy buffer. Mac users can use pbpaste and pbcopy instead.
ssh root@192.168.0.1 tcpdump -n -i any -w- 'not \( port 22 and host 192.168.0.1 \)' |etherape -r- # Instant visualization of linux router traffic. Yes, root on the router, you can help make this more secure by forcing key auth only and setting PermitRootLogin forced-commands-only
qalc "145Gbyte / 1.5Mibit/second to day" # How many days will it take to transfer 145GB (base 10 bytes) at 1.5Mibits/sec (base 2)?

alias yeet="rm"
alias skurt="exit"
alias yolo="rm -rf / --no-preserve-root"
alias hashtag="sudo !!"
alias fetch="clear"
alias curve="sudo /sbin/iptables -I INPUT -j DROP"

find Documents -size +500M -ls | sort -k7nr | less # Find files under the Documents directory larger than 500MiB , long list them with stats and sort based on the size column (-k7) numerically (n) and descending order (r = reverse), passing that output into less.
while ps auxw | grep '[m]yscript'; do sleep 30; done | stdbuf -o0 uniq | ts # Monitor changes in memory usage of myscript and timestamp the lines using ts. stdbuf -o0 turns off output buffering. [m] in the grep expression prevents the grep process line itself from being matched.
convert -list font | awk -F: '/^\ *Font: /{print substr($NF,2)}' | while read font ; do convert -size 600x400 xc: -annotate +10+10 "$font" -gravity center -pointsize 42 -font "$font" -annotate +0+0 'ABCDEF\nabcdef\n012345\n!@$%%' -flatten "$font".png ; done # Font demo images
ionice ncdu -x -r # Find those big files! ncdu is TUI program to generate and view usage statistics for disk space from the current directory and below. Use -x to avoid crossing filesystems and disable file modification with -r. ionice will give ncdu have less IO priority.
for u in website\.com/bc{3,8}449{0,8,9}2-ab7a-1{3,8}03; do curl -sI $u|grep -q 404||echo $u;done # Try finding the correct URL given a fuzzy TV screenshot.
diff <(openssl rsa -in my.key -modulus | grep Modulus) <(openssl x509 -in my.crt -modulus | grep Modulus) # Check if cert my.crt belongs to the key my.key. Ones that match have the same Modulus.
echo $((($(date -u -d "$(openssl crl -inform DER -in <(curl -s http://uri-of-crl) -noout -nextupdate | cut -d '=' -f 2)" +%s)-$(date -u +%s))/86400)) # This checks the remaining validity of an CRL. It returns full remaining days as integer.
rpm -qa --queryformat "%{NAME} %{INSTALLTIME:date}\n" | grep "Nov 2019" # In RPM, determine which packages where installed in Nov 2019.
clear;t=0;while [[ ! $t =~ ^\- ]] ; do printf "\e[0;0f" ; t=$( echo "1577836800-$(date +%s.%N)" | bc );echo $t|figlet -t -f smmono12 --metal; done;yes "$(seq 231 -1 16)" |while read i; do printf "\x1b[48;5;${i}m\n"; sleep .02; done # Countdown to 50 years of Unix epoch time.
meld foo bar # gui for diff

python -c "from datetime import date; print (date(2020,3,25)-date(2019,12,9)).days" # difference in days between two dates
 -> echo "( $(date -d 2019-12-09 +%s) - $(date -d 2019-09-18 +%s) ) / (24*3600)" | bc -l

==May 2020==
sudo nethogs # Ever wonder what specific process is using all the bandwidth? Use nethogs to find out. Also try the "-v 2" option to see the cumulative bytes transferred.
stat -c "%F"$'\t'"%15s"$'\t'"%n" -- * | awk -F"[\t\.]+" '/^regular file.*\..{1,5}$/{t[$NF]+=$2;x[$NF]++} END {for (s in t){printf("%-5s %4i %12i\n",s,x[s],t[s])}}' | sort -k3n # See what type of files are taking up so much space. output columns = type count bytes
ps -e -orss=,pid=,args= | sort -b -k1n | cut -c1-$COLUMNS # Change the output of ps to be just memory, pid and process args, sorting the processes by memory usage (first column) and cutting the lines to fit the terminal.
ps -e -orss=,pid=,args= | awk '{$2=int(100*$2/1024/1024)/100"GB";}{ print;}' | sort -bh -k2n | cut -c1-$COLUMNS
ls -lad -- * | awk -F"[\ \.]+" '/^-.*\..{1,5}$/{t[$NF]+=$5;x[$NF]++} END {for (s in t){printf("%-5s %4i %12i\n",s,x[s],t[s])}}' | sort -k3n

# Show all years from 2000 through 2100 where Cinco de Mayo coincides with taco Tuesday:
for y in $(seq 2000 2100)
do
 if [ $(date -d ${y}0505 +%u) = 2 ]; then
  echo $y
 fi
done

vi *(.om[1])  # newest file o=order m=modified
ls *(.Om[1])  # oldest file
ls *(.oL[1])  # smallest file L=Size
ls *(.OL[1])  # largest file
ls -hlS /**/*(.OL[1,10]) # find the 10 biggest files on your system
gvim -p *(.om[1,3]) # open 3 newest files in tabs

youtubeuploader -title "Cat Mischief" -description "50 minutes of my cat knocking stuff over" -limitBetween 09:00-17:00 -ratelimit 1000 -filename cat.webm # Upload to youtube, but limit the rate to 1000kbps between 9 and 5pm.
 -> https://github.com/porjo/youtubeuploader
grep -ao "[/\\]" /dev/urandom| sed -e 's,\\,╲,' -e 's,/,╱,'| tr -d \\n | while read -n$COLUMNS input ; do echo $input ; done  | lolcat -F 0.01 # Trying to navigate the world of information today.
geoiplookup 80.82.77.245 # Look up the geographical location (by country) of an IP address that scanned your host.
x=0;y=0;while [[ $y -lt 500 ]] ; do xdotool mousemove --polar $x $y ; x=$(($x+4));y=$(($y+1)); sleep 0.01; done # Move your mouse from the command line in a perfect spiral using the xdotool and polar coordinates.
wget --limit-rate=750k https://somenewlinux\.io/0.9alpha.iso # Download an ISO image but rate limit the download to just 750KB/sec so it's not disrupting your parent's work video conferencing
curl -s https://www.census\.gov/popclock/data/population.php/world | jq '.world.population' # Check today's world population.
python3 <<<'print(2-20**1991)' # calculator

parseIpv4FromAddress() {
    PARSED_IPV4=$(echo "$1" | grep --only-matching '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*')
}

isValidIpv6() {
    if echo "$1" | grep -qs "^\([0-9a-fA-F]\{0,4\}:\)\{1,7\}[0-9a-fA-F]\{0,4\}$"; then
        return 0
    else
        return 1
    fi
}

cat /proc/sys/fs/pipe-max-size
date +"%FT%T"  # => 2020-05-20T09:30:33
ansiweather -l "Redmond, WA" # -u imperial
mount | column -t
sudo ethtool --identify eth4 # Figure out which interface on your uber home Linux router is eth4 by blinking the interface light steadily.
mplayer -msglevel all=0:cplayer=5:statusline=5 *.flac # mplayer can be kinda chatty on the console, fortunately, you have a fair amount of control over what is printed. You might first run the command with the -msgmodule option to get an idea of what modules you need to control.
echo 'echo "Learn about a command:";until whatis -s1,6,8 $( basename $( shuf -n1 -e /bin/* /sbin/* /usr/bin/* /usr/sbin/* ) ) ; do : ; done' >> ~/.bashrc # Learn about a command on each new shell open.
csplit document-in-sections.txt '/^$/' {*} # Split a file into multiple using an empty line as the split point. {*} means do this until the end.
n=0;while : $((n++));do printf "%0${n}d"| grep -qP "^0?$|^(00+?)\1+$" || echo $n;done # Find prime numbers above 1 with Perl Compatible Regular Expression (PCRE) support in grep (-P). How it works: http://bit.ly/O1LMMD
files=(*); unset 'files[3]'; du -shc "${files[@]}" # Make an array called files with all the files in the current directory in it. Then remove the file in index position 3 from the array (zero indexed). Then give the total size of the remaining files in the array.
help variables # Get some instant help on some commonly used shell variables. Not an exhaustive list nor should it be.
mplayer -vf 'geq=p(X\,Y)*gt(W/2\,X)+p(W-1-X\,Y)*lt(W/2-1\,X),scale' tv://
while true;do printf "$(awk -v c="$(tput cols)" -v s="$RANDOM" 'BEGIN{srand(s);while(--c>=0){printf("\xe2\x96\\%s",sprintf("%o",150+int(10*rand())));}}')";done # Generates a TV noise alike output in the terminal
bc -l <<< "scale=1000; 4*a(1)" # Calculate pi to an arbitrary number of decimal places
rsync -e 'ssh -i /root/my.pem' -avz /mysql/db/data_summary.* ec2-1-2-4-9.compute-1.amazonaws.com:/mysql/test/ # rsync using pem file
cat /proc/net/tcp | grep " 0A " | sed 's/^[^:]*: \(..\)\(..\)\(..\)\(..\):\(....\).*/echo $((0x\4)).$((0x\3)).$((0x\2)).$((0x\1)):$((0x\5))/g' | bash # parse and format IP:port currently in listen state without net tools

(IFS=': '; for i in *.(#i)jpg; do set $(exiv2 -K 'Exif.Image.DateTime' -Pv $i 2> /dev/null); mv -v $i "$1-$2-$3${i#[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]}"; done) # Fix time-stamped filenames of JPEG images according to the EXIF date the photo was taken
echo > /dev/tcp/127.0.0.123/8085 && echo "Port is open" # Check if port is open on remote machine
https://unix.stackexchange.com/questions/50177/birth-is-empty-on-ext4/407305#407305

==June 2020==
bc -l <<< "scale=1000; 4*a(1)" # pi
for i in $(seq 1 10); do bc <<< 2^$i; done
curl cht.sh/python/lambda

==July 2020==
echo -e "\033[32mhello\033[0m" # green
tr -dc 'a-zA-Z0-9~!@#$%^&*_()+}{?></";.,[]=-' < /dev/urandom | fold -w 32 | head -n 1 # Generate random 32 character password
eval "$(ssh-agent -s)" && ssh-add -K ~/.ssh/id_rsa # Add an SSH key to the SSH Agent
cat ~/.bash_history | tr "\|\;" "\n" | sed -e "s/^ //g" | cut -d " " -f 1 | sort | uniq -c | sort -n | tail -n 15 # top most 15 used commands (from bash history)

==August 2020==
watch -n 2 sensors # get cpu temperature
echo $[$[$(date -d "2020-11-03 00:00:00" +%s)-$(date +%s)]/60/60/24] # number of days between now and a future date

# If you divide 1 by 998,001, you get all three-digit numbers from 000 to 999 in order, except for 998:
$ BC_LINE_LENGTH=0 bc -l <<< "scale = 100; 1/998001" | tr -d '.' | sed -e "s/.\{3\}/&\n/g"
000
001
002
003
004
...

printf "%s\n" 3^{1..19} | bc | nl # Print out the first 19 powers of 3 and number them.
convert company-logo.{svg,png} # Convert a SVG vector graphics file into a PNG raster graphics file.
awk '$9~/^2/ {bytes[$7]+=$10; hits[$7]++} END {for (page in bytes){ printf ("%15d %8d %s\n",bytes[page],hits[page],page) }}' access_log | sort -nr | head -23 # Generate a top 23 list of the top bandwidth utilizing documents on a website and the number of hits on each one.
onvert scanned-doc-page{1..8}.png scanned-doc.pdf # Using ImageMagick convert, convert a set of scanned images 1-8 back into a PDF file.
find . -name "* *mp3" -exec rename 's/\ /-/g' {} \;
grep -o -P "(?<=CRON\[)\d+" /var/log/syslog # GNU grep supports perl regular expressions. So you can use zero-width look around assertions. This gives only the PID on CRON lines in syslog. See the pcre or pcrepattern man page for more info.
find . -mtime +4 ! -name '*.gz' ! -empty -execdir gzip -v9 {} + # Find non-empty files over 4 days old under the current directory without a .gz extension and compress them.
find -regextype help # Check out all the regex engine options find has to offer.
grepcidr 2102:306:146e:f5d0::/64 /var/log/secure # Use a CIDR network format aware version of grep to search for hits from IPs within the IPv6 range 2102:306:146e:f5d0::/64
seq 2457 7542 | grep 2 | grep 4 | grep 5 | grep 7 # Find all potential 4 digit combinations that only have one of each number 2, 4, 5, and 7 for a CTF game.
# you can use # comments in the #terminal for ease of search when using [Ctrl-r].
gpscat /dev/gps0 | stdbuf -o0 awk -F , '/^\$GNRMC,.....[05]/ { second=substr($2, 6, 1); if (second != last_second) { print $2, $4, $6, $8, $13; last_second=second } }' | stdbuf -o0 uniq -f 1 | tee -a ~/gpslog.txt # Display and log GPS position in 5s interval, but only on change
curl -s -D- http://suspicio\.us/URL |grep -iE "^Location: |URL=|window.location|document.location" # Try to check where a URL may redirect you.
curl http://zoidberg.live
less +F filename.log # Using +F option or pressing F in less is similar to `tail -f filename.log` but can use less's features.
a=(697 770 852 941);b=(1209 1336 1477 1633);c='123A456B789C*0#D';while read -N1 l;do r="${c#*$l}";i=$((${#c}-${#r}-1));[ "$l" = "*" ]&&i=12;play -n synth sin ${a[$((i/4))]} sin ${b[$((i%4))]} remix - trim 0 0.2 2>/dev/null;done # Play DTMF tones using your keyboard. Uses sox pkg.
curl -s http://artscene.textfiles\.com/vt100/globe.vt | pv -L9600 -q # Spinning ASCII art globe.  Visit the parent directory in that URL for more animations.
 -> while true ; do cat globe.vt | pv -L9600 -q | GREP_COLORS="ms=01;32" egrep --color=always "[^ ]+" | GREP_COLORS="ms=01;44" egrep --color=always -e "\ +"  | sed 's/^.\[01;44m//' ; done # Level up
ls -ld /lost+found # Unless you've had some filesystem trouble or migrated to a new root filesystem, this will usually indicate when you installed a system.
awk 'NR==1{print} END {print}' data.csv # An awk way to print the first and last line of a file easily using awk so that for example you can see the headers along with the most recent entry for data.
pgrep rsync | xargs ionice -c3 -p # Adjust all rsync processes on the system so that they have lower (idle) IO priority.
for i in *.tar.gz; do mkdir "${i%.tar.gz}";( cd "${i%.tar.gz}" && tar zxvf ../"$i" );done # Put the output of each tar file into its own directory.
geoiplookup $(dig +short xtof.ch)
 -> geoiplookup $(dig +short MX xtof.ch) # mail
youtube-dl -o - https://twitter.com/climagic/status/1275241585119297536… | ffmpeg -i - -r 15 -vf scale=512:-1 -f gif ohwow.gif # Convert a "GIF" from a tweet (which is actually an mp4) into an actual GIF animation.
sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 # sort IPv4 addresses

==October 2020==
colors=( $( convert -list color | awk '/srgb/{print "xc:"$1}' ) ) ; montage -pointsize 12 -fill black -label "%f" -geometry 100x100+1+1 ${colors[@]} -tile 5x5 colors.gif ; convert -delay 80 colors.gif colors.gif ; animate colors.gif # Create a palette animation of color names.
montage -label "%f\nI am Jack's swatch" xc:CornflowerBlue -geometry 150x150+5+5 show:
As cp lacks progress monitoring builtin, use rsync instead: $ alias pcp="rsync -r --progress" Example: pcp SRCDIR DESTDIR # Do a recursive folder copy and monitor progress while copying
sort -V ipv4addrs.txt # In GNU sort, you can use -V (version sort) to also sort IPv4 addresses numerically according to each octet. For IPv6, try using ipv6calc --addr2fulluncompaddr first to normalize the addresses and pass to a plain sort.
sudo iptables -nL f2b-sshd | awk '/REJECT/{print $4}' | xargs -n1 geoiplookup # Show the countries currently represented in your fail2ban ssh firewall jail table.
sudo tcpdump -nn "tcp[tcpflags] == tcp-syn and dst host 1.2.3.4" # Show attempts to establish a TCP connection (successful or not) to the IP 1.2.3.4
IFS=$'\n' users=( $( cut -d: -f1 /etc/passwd ) ) # Create an array of the users on the system by using the output of cutting the /etc/passwd file into columns and temporarily setting the IFS value separator variable to a newline.
ascii -x || man ascii # View the ASCII character table in hex values. You probably either have the ascii program or you have the man page.
echo ${COLUMNS}x${LINES} # Print out the character width and height of your terminal so that you generally know what will fit. This is a bashism, but works in some other shells too.
look disc # look for words that start with 'disc' so you can play in a what words start with 'disc' office game.
curl http://v2.wttr.in
X="oooooooooo";{ printf 'static char *tmp[] = {"10 10 4 1","o c #111","R c #F00","B c #00F","Y c #FF0",';printf '"%s",' $X $X $X $X ooYYoooooo oooYYooooo $X $X RRooooBooo RRoooBBBoo; echo '};' ; } | convert xpm:- -scale 200x tetris.gif # Tetris accomplished by abusing XPM format.

==November 2020==
for i in $(seq 1 32); do sipcalc 1.1.1.1/${i} | awk -F'-' -vip=$i '/^Network range/{print ip,$2,$3}' | tr -s " "; done | column -t
find . -name "*.mpeg" | xargs -P 4 -I {} ffmpeg -i {} -o {}.mp4 # convert, video
yakuake - Quake-style terminal emulator based on KDE Konsole technology
echo 75,245,602-70,821,392|tr -d ',' |bc -l
for i in $(seq 2000 2030); do echo $i && cal -y $i|awk '{print $6$13$20}'|grep -o 13|wc -l|tr '\n' ' '; done # how many friday the 13ths are their in a given month in a given year
 -> ncal -S -h 2012 | grep ^Fr | grep -o 13 | wc -l
p=3.14;for i in $( seq 0 0.04 100 );do r=$( printf "128+127*s($i)\n" |bc -l |cut -d. -f1) g=$( printf "128+127*s($i+$p*(1/3))\n" |bc -l |cut -d. -f1 ) b=$( printf "128+127*s($i+$p*(2/3))\n" |bc -l |cut -d. -f1 ); printf "\e[48;2;$r;$g;${b}m\n"; done # Sunrise in a 24-bit terminal
date -d 2008-02-24 # See what day of the week Feb 24th, 2008 was on using GNU date.
for word in $( look i | egrep "^[a-z]+$" ) ; do grep "^${word/i/we}$" /usr/share/dict/words && echo "$word" ; done | tac | xargs -n2 | column -t # Check what words can be made by changing the 'i' at the beginning of the word to 'we'.
python3 -mhttp.server > /dev/null 2>&1 & # Run a simple web server using python in the background on your shell and redirect it's logging and startup message to /dev/null. Just remember to turn it off when you're done with kill %1 or something like that.
(base64 -d <<<TVRoZAAAAAYAAQABAYBNVHJrAAAoMAD/UQOZlmY=;notes=("4E" "55" "56");for x in {0..31}; do echo -n 1001001020|while read -n1 i;do printf "\x00\x90\x${notes[$i]}\x7F\x08\x80\x${notes[$i]}\x7F";done; done)|timidity - # Piano riff from Halloween.
play -n synth sin 900 bend 0.3,800,1 bend 1.2,-150,1 trim 0 3.5 reverb -w # Make your own spooky noises with the 'sox' program.
https://stackoverflow.com/questions/33486339/can-an-ssh-config-file-use-variables

==December 2020==
openssl rand -base64 128
 -> kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
grep . /sys/class/thermal/*/*
iw list

==February 2021==
shuf -i 1-1000 -n 1 # return a random number between 1 and 1000

==March 2021==
The sed command r inserts a file. For example, insert foo.h after 'INCLUDE': sed '/INCLUDE/ r foo.h'
du -sh */ | sort -h # Show directory size and sort by human readable amount (MB, GB, TB, etc.). The -h option is usually a GNU option though.
p=printf;{ $p "convert -size 300x200 xc:#000 -pointsize 26 -font Peignot -gravity north ";$p " -fill \#%s -draw \"text 0,%d 'COMMAND LINE MAGIC\" " f0f 5 f00 25 f80 45 ff0 65 8f8 85 ff0 105 f80 125 f00 145 f0f 165;$p " -sampling-factor 4:2:0 mtm.jpg"; }|sh # Make TV title parody
sudo tcpdump -X -n dst port 143 or dst port 993  # Listen for connections on common IMAP ports and show the traffic to ensure that TLS/SSL is working. If you see your username or password, it's not.

# plot functions or CSV files
seq 0 0.001 6.29 | perl -nE 'say
  sin($_*100)*0.3+0.5*cos($_*2),",",
  sin($_*2)-cos($_*100)*0.3,",",
  sin($_)+cos($_*99),",",
  sin($_*3)-cos($_*101)' | plotpipe;
cat csv | plotpipe;
seq 1000 | shuf | plotpipe
# https://gitlab.com/ole.tange/tangetools/-/tree/master/plotpipe

pdfgrep -C3 -ni -e Egypt.*Hadrian -e Hadrian.*Egypt A-Companion-to-the-Roman-Army.pdf # pdfgrep has most of the features of normal grep and does things that probably no PDF reader is going to do. Such as regular expressions, multi-line matching, and multiple expressions.
mplayer tv:// -tv driver=v4l2:device=/dev/video2:brightness=40 -vf mirror -fps 30 # Test your webcam before a meeting (change the "/dev/video2" part if necessary)
nmap --open -p T:22 10.1.5.0/24 # Find the hosts on the 10.1.5.0/24 that have possibly open SSH ports on the default TCP port 22. Great for finding that headless orange pi you just started.
[ $(( $RANDOM % 2 )) -eq 0 ] && command # Run a command "unreliably". In other words, it will run 50% of the time on average. Use a higher number than 2 to decrease the chance it will run. Could be useful in cron, but remember to use \% instead of % if using in crontab.
find ${PATH//:/ } -type f -maxdepth 1 -perm /6000 -ls # Find all the programs in path directories with suid or sgid bits set. Of course you probably just want to do this on the whole filesystem.
dict(){ command dict "$@" && printf "%s %s\n" "$(date)" "$*" >> ~/.dictlog; } # Use a function to overload the dict command so that it will keep a log of the words you look up.
